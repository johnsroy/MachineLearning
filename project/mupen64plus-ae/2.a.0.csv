"commit id","commit date","commit message"
"ff0bf2bd755f5bc12b99af14241151ed50591bfe","2012-05-07 21:22:48-04:00","Replace the notification system in the app with the better Notification.Builder

also makes it look so much more elegant.

(the notification system that was previously in place was deprecated anyway).
"
"a8a67b46af5f608a5e1f8dfa017b6a79617c6f88","2012-05-07 22:26:26-04:00","Run OptiPNG over the png resource images.

Yay for lossless compression.
"
"332e0ba1e8d910a49bf6674a6639664b1817ebcc","2012-05-08 07:10:18-04:00","Apply non-essential updates to RICE, just so consistency is kept with the main repo:

https://bitbucket.org/richard42/mupen64plus-video-rice/changeset/09de024e3784
"
"9f47c3356715251bffa2b6b90c4e04eb91849ff9","2012-05-08 07:30:26-04:00","Clean up the beginning of OGLFragmentShaders.cpp
"
"2cdea074ee72b49803bfbb913ec23230e812bb7f","2012-05-08 07:50:41-04:00","Reduce array allocations in OGLFragmentShaders.cpp. They don't need to be this large.
"
"0039359394ff1486438a0a6dd8418c409e0f5bf9","2012-05-08 19:20:27-04:00","Update RSP parsing for RICE video plugin.
"
"017e0474f3d99d8919e1aee8305306102e1b53a5","2012-05-08 20:23:11-04:00","Push big rice video update.

Refactored the ucodedefs (according to the original rice video)

More ucodes added for games, so this is a nice benefit.

All the microcode additions should work now :)

Everything should be completely functional now.
"
"842f5b4f7b2f1a068c510cf46e3d42d046fc53b7","2012-05-08 20:41:43-04:00","Remove some unusual spacing that occurred after I did this change.

Fix some variables that I forgot to change over.
"
"43ef1c0c3b11f59a00de3ffc6be9199e430c6969","2012-05-08 21:26:34-04:00","Fix accidentally renamed variables. Compiling should be fixed now.
"
"2a0ccd9122dc41aad942d6ec251b9d188b9a2a32","2012-05-08 22:45:10-04:00","replace u32 with the more informative uint32 (programmers should know the they mean the same thing, but hey, a little syntactic sugar never hurt anybody).
"
"05b6e4c790ed7e7fe7d1ed235f201ebb89fc3748","2012-05-08 22:47:14-04:00","Remove a tab that somehow sneaked in.
"
"50ee66ad6e3275a927b925f95587fcc0ebc729d8","2012-05-08 23:53:47-04:00","Changed two debug defines to match that of all the other source files.
"
"14be41715264e3b971a047932f8e26410905751b","2012-05-09 06:57:49-04:00","Provide backwards compatibility with the notification system for devices that are under android 3.0

Fixes the force close people have been getting.
"
"76609acf3609ec538a10bb5f4258ef3e70ef9045","2012-05-09 06:59:18-04:00","Wildcard the imports so consistency is kept with the other imports.
"
"cc82676adaef70ccb1d407bd940ff12ca9279ebb","2012-05-09 07:20:30-04:00","Found another ifdef that wasn't named correctly. This should be the last one
"
"6bce6db36b6468677faf4f4b615a8749d5e5f447","2012-05-10 07:27:30-04:00","Clean up OGLRender.cpp

Nothing new added. just removed some unnecessary commented code.
"
"fe0ec6c138374aad60f07b75a9e6a13567ae6398","2012-05-15 23:30:31+02:00","Fix name of PIC thunks with gcc 4.7
"
"3b5b5607ecccf30f1f5e4a63e0bb5bc53c3544cb","2012-05-15 23:35:35-04:00","Update the English strings. Proper capitalization, etc.
"
"34d877620dc41c494960f302e4d5e860d3f40348","2012-05-20 09:24:58-07:00","moved breakpoint typedef and BPT_* macros from dbg_breakpoints.h into m64p_types.h
"
"eea684f9eb53c572cb5f52780349b383b58abeef","2012-05-23 07:23:27-04:00","Fix up some comments. Also properly made some method comments into javadoc.
"
"8ab2c64c856d97560a53afd7d9634c25b2ce9b5e","2012-05-23 07:24:05-04:00","Straightened up some comments (as well as code).
"
"31f450117a3a09aa28c19d772bc2f0be5249b813","2012-05-23 07:32:35-04:00","Remove implicit imports, these don't need to be explicitly imported.
"
"688010ebf7eb072ddbbebd99176466a71921e143","2012-05-23 16:27:16-04:00","Organize imports, also change some while loops in SDLSurface into for loops, since this shortens some code into a single line.
"
"3e6fa2925c55264b000ce9e12dec0263a873ed24","2012-05-23 16:32:34-04:00","Fix a few typos in Touchpad.java and made a few other comments javadocs.
"
"1b45c0d510c7cb752e1fd53903142db6ae88a86c","2012-05-23 16:43:28-04:00","Update the mupen64plus core to the latest official revision.
"
"133c04fde833066408b19a85f69ae1ed3261c6df","2012-05-23 16:48:41-04:00","Yet another javadoc that slipped through.
"
"62370e59e3bac7bb0cc8e0ab2a161544f5f7c86c","2012-05-23 17:08:02-04:00","Found some variables that I missed when changing around the RICE plugin a while back. Fixed them.
"
"061b672be06d127e60bfdaa91c49bf981c38658d","2012-05-23 17:37:36-04:00","Clean up RSP_GBI_Others.h

(Also Paper Mario seems to play better on the rice plugin now).
"
"e6d233ac87dbfd04c0a2b4d31977f101de4d83af","2012-05-24 18:09:46-04:00","Changed some files relating to the core. The instructions in bc.c and cop0.c and regimm.c are modified to match the official mupen64 repo.

Also a bit of code in memory.c was removed as it was unnecessary.

This does have an improvement, paper mario no longer lags on startup as hard as it used to.
"
"a943421d57095d9e7791eb892978d132c4d800b1","2012-05-24 19:10:30-04:00","Revert back a commit, I'm actually an idiot.
"
"8fde63360a8106b403c59e991999aa378567354c","2012-05-27 22:53:01-04:00","Fix up the auto save string description
"
"0c1607513977881d0886abfcf97db2e06cd7e7e8","2012-05-27 22:59:05-04:00","Replace the xperia_play_only string with one that explains the function better.
"
"d238510efd446b12bb4ca234628db34741fb4c8f","2012-05-27 23:33:28-04:00","Add the French translation to the resources.
"
"4890a9fab5ed02a82e8d71312dc9e7f7d5977d0f","2012-05-27 23:34:30-04:00","Whoops, forgot to commit the updated Language activity. Now French can be selected in the languages.
"
"6b54f8b60aec48c068dd24044b449ed52a8252e4","2012-05-27 23:59:35-04:00","Add RyDroid to credits for the French translation.
"
"9347a98962d3b2a121a2efe7aed45e0f9c670cdb","2012-05-28 19:42:56-04:00","Indent a method which was incorrectly indented in GameActivityCommon.java
"
"5461e091cfc0d40bdb5002334636954145a2d4ca","2012-05-28 19:44:45-04:00","Tabs didn't fully get removed. Fixed this.
"
"8dcdbb06e1e57dc9f66f158fb97115afba9967c6","2012-05-29 22:11:03+02:00","Remove unused functions
"
"b6aa3e52dcd3e92b91a0f7b1510b01d73f63612f","2012-05-29 22:11:55+02:00","Reduce call overhead for assemble functions

The macro like assemble functions have a relative high overhead due to the call
necessary to write only a small number of bytes. A compiler without link time
global optimization cannot analyze these functions and inline them.
"
"a68e8d67c61982fa1834edf95df641fdacc4670e","2012-05-29 22:12:38+02:00","Remove unused variable bdslot in db_disasm_insn
"
"307c6875ce91b6af746d79b5ead2db2fb03ba76d","2012-05-29 22:13:05+02:00","Print function pointer using %p instead of %x
"
"68e3d1317e1f495d418d03ce170f443ac322cf6d","2012-05-29 22:13:29+02:00","Import minizip from zlib 1.2.7
"
"84a36e8f9245e8ea61d756ecfd468f7464c19d2c","2012-05-29 22:19:41+02:00","Enable experimental support for link-time optimization
"
"592d67b9124aac7f51cb1953c7b4cba09d42b4f5","2012-05-29 16:20:49-04:00","Fixed PowerVR texture coordinates bug
"
"c475c7de0b6b8fb4ec4aa20799c2f1b1f5221c4c","2012-05-29 16:51:17-04:00","fragment shader formatting
"
"c43d6e0ac02f9e69ddd648385467c0dbe8cb6795","2012-05-29 17:41:22-04:00","Added hardware profiling to Rice (missing shadows, stars)
"
"e02796fd0088bcc9f2f344755345d4774a22ef9c","2012-05-29 18:30:19-04:00","Removed logcat spamming message
"
"e18eaa96bb65064acba3355a8531a1a91a8b4e1b","2012-05-29 19:35:43-04:00","Fixed eglWaitNative error message (possibly improving stability as well)
"
"73f49e3b3f8740e6d514ca055ef8ed16c6e55feb","2012-05-29 21:31:17-04:00","Finally push the preference UI update.
"
"8d83a78c71c1516673ccecff83220a250ffb475e","2012-05-29 21:54:49-04:00","Changed MenuSkinsGamepadActivity and MenuSkinsTouchpadActivity to IOptionListeners for consistency
"
"924147a345db2ef62c9ae7887d697507ccee3d01","2012-05-30 06:57:52-04:00","Fix a comment and remove an unused import.
"
"5223be66ffa238ec320a7a67230e46b903c86aba","2012-05-30 07:14:48-04:00","Found more imports that didn't need to be imported.

Corrected the @author tag in Touchpad.java
"
"229735655fc0e56e5ec54d6fdff3124a369c1d0d","2012-05-30 07:36:14-04:00","Add the option to enable/disable 2xSai texture filtering for gles2n64
"
"5f428fd82f7f22eb2f57628cee727e4203463fdf","2012-05-30 07:40:08-04:00","Remove an unused variable.
"
"546c2dcc43a9db25b59cd42d6d644036b8687687","2012-05-30 07:48:05-04:00","Reorganize imports so that they're sorted alphabetically, makes it easier to find out if a class is imported.
"
"a173c74c543e1172af9b1291593314ae82dcc8e2","2012-05-30 08:03:18-04:00","Found another unused variable. Removed it.
"
"ffce99dc9aa13f9a323f1faa23a770e2156fa28b","2012-05-30 18:16:20-04:00","Fixed Diddy kong racing to an extent for the rice plugin.

Why the hell does stuff appear inverted though ?
"
"982474eef9163ce1f78c878b245cf2a4350e9ac4","2012-05-31 20:18:30-04:00","Changed installed app name to avoid truncation
"
"6713cf5335efdab05c53f1c8d0650b98debbd2fb","2012-05-31 20:45:35-04:00","Replace 3 periods in the resource language with an ellipsis.

Remove an unused variable.
"
"9145b7ab15506935792ce1845fe6e6db22be7df4","2012-06-01 07:55:07-04:00","Added new icon for SDK 11 (Android 3.0) and up.
"
"c1630a9de7fe815ae4f05d8cbbfeabbdd7abe72e","2012-06-01 08:00:35-04:00","Correct a filename naming mistake.
"
"0347d876c0b66a1c1b41ebb4e37e271648a87f25","2012-06-04 22:16:13-04:00","Fixed crash with ICS on Xperia Play
"
"8364640d7dc6a2515ae953d56e8d40356fc7b803","2012-06-04 22:20:15-04:00","Oops, bad spacing.  Fixed.
"
"0976cef7c36f84ee3fc9d998c011eb1ba3772a04","2012-06-09 00:23:55+02:00","Enable experimental support for link-time optimization
"
"02d65fa1d1cdbfc1882f5c65746d1f01112ea61f","2012-06-09 00:54:13+02:00","Enable experimental support for link-time optimization
"
"524369cf8c13b46e82aa0c462c7a3ff6727b59e7","2012-06-09 00:56:33+02:00","Enable experimental support for link-time optimization
"
"56159acc29ec9dbfffd578bbb6f5416423937b6a","2012-06-09 01:11:18+02:00","Enable experimental support for link-time optimization
"
"25e2b1003c34428db3e3cd973193d78a6fc8b8cc","2012-06-09 01:31:27+02:00","Enable experimental support for link-time optimization
"
"aa0aa61cd7b5a081271ae1cf66483670cd65303c","2012-06-09 10:39:33-07:00","add Saitek Cyborg v.3 rumble pad from Alec T. (techierefugee at gmail)
"
"f3466076e016d48a2a7c7e09ac9e26728ed61303","2012-06-15 19:17:43-04:00","Update Core from main repo.

Should have reduced overhead on some functions now.
"
"96dc146b11479ea087f0761861e12b6cf0f36e5b","2012-06-15 19:18:01-04:00","Merge branch 'master' of github.com:paulscode/mupen64plus-ae
"
"813b0179856d804533af1dbbfaf2b28e9dfe073f","2012-06-15 19:30:33-04:00","Added another controller to the input cfg.
"
"b237022d5ec677d1c64f3730e1701f20b3ad9287","2012-06-18 20:07:51-04:00","Removed extraneous source files
"
"44fd1ded2fc7d2a5bd6140bdedaeb0399c6e3a6b","2012-06-18 22:06:57-04:00","Fixed RAM full of zeros bug (need to restructure folders after tests)
"
"1408b68838c00806da0a07b2150a384e2ab1bd7f","2012-06-18 22:08:20-04:00","Fixed package name (was changed for testing, accidentally committed)
"
"ce1a747b95800dfa15580705841e3fd663d33fa7","2012-06-24 11:33:42-07:00","build fix for windows
"
"46549eea52b927db125863759c1462d8128c1754","2012-06-25 02:33:47+02:00","Implementation.
"
"c939b8ca0cf7bd4c203c1d1bea3e3213151411de","2012-06-25 02:36:43+02:00","Make sure main.h is included.
"
"d8d9f23080fd895dafb59b0bb7bea44c14b9d332","2012-06-24 18:13:17-07:00","string safety for DebugMessage
"
"e6ab835191d03333b921d5015e1c665eb19ec00f","2012-07-06 22:35:07-07:00","fixes for DragonRise USB joystick
"
"f61dc7e362e5c3b104cb0f8bb26e43814ab66757","2012-07-09 09:57:41-07:00","fix for zlib weirdness from latest gentoo update
"
"41348aa636715829f5a4d6d9d3f62c56ef21cc5b","2012-07-15 14:16:34+02:00","Fix build of mupen64plus on non-gentoo systems
"
"406e6f43f0c5cf64cc8b8e3a9d684331619f40b3","2012-07-21 15:19:32-07:00","fix for Twintris PD ROM from Bobby Smiles
"
"1fa17398d8a3a667411de1f9b9b48640f44c9d65","2012-07-27 07:22:48-04:00","Apply two RSP changes from the main repo. They are:

- Fix for Twintris PD ROM from Bobby Smiles
- Build fix for windows
"
"77197fd0862ab11da33b262778e5597f90503477","2012-07-27 07:25:03-04:00","Merge branch 'master' of github.com:paulscode/mupen64plus-ae
"
"abeec41e4fbd40832edcf8fcab243668063d4538","2012-07-27 07:29:30-04:00","Apply an input fix from the main repo:

- Fixes for DragonRise USB joystick
"
"2b291af0c3ef12cb8410a67948dcfc058a2b3453","2012-08-06 21:59:08+02:00","- Added shell32.lib as a dependency to VS project (because some functions like SHGetSpecialFolderLocation are used)
- #define inline __inline in mupen64plus-core for Visual Studio, since 'inline' doesn't work on Visual Studio (2008) for C files.
- Added a reset.c file with functions to perform soft and hard resets
- Add support for multiple path separators instead of just one
- Added a PluginGetVersion to the dummy plugins, so they can be handled as if they were a real plugin
- Added new frontend APIs:
Get screen width
Get screen height
Read screen
Volume up
Volume down
Get volume level
Set volume level
Mute volume
Input callback
Soft reset
Advance frame
Audio callback
Get audio frequency
Read audio samples
Vi Callback

- Reorganized internal rom_header structure so field sizes make more sense
- Added two systemtype and vilimit properties to m64p_rom_settings
so frontends can get this information easily instead of looking at ROM header,
and also simplifies some internal logic
- Some other refactoring/commenting
"
"eadafafe2fdb6e5687dd857e28a42270513d3511","2012-08-06 21:59:10+02:00","Remove some leftovers from the last commit.
"
"af22ad98e699f267f971e45fca55cd2d4aaf1444","2012-08-06 22:00:03+02:00","Do some refactoring around savestates.c. Note the fixed memory leak on PJ64 savestates. Needs testing and more refactoring tough.
"
"6c0562536122533c44e18204e7b51cb10bc21ef3","2012-08-06 22:00:21+02:00","Quick fix: Don't pass an unitialized zip_fileinfo* to minizip, passing NULL is OK and deterministic.
"
"5167baf5aea85f86fd717e5901f8a6b559a8324e","2012-08-06 22:00:29+02:00","Don't limit path length for savestates path.
"
"ef720185416868513c13a560359ec4fd137bc087","2012-08-06 22:00:31+02:00","Use strdup instead of manually copying.
"
"7f9c0c1440f01360131f757580e2485c4748a101","2012-08-06 22:00:32+02:00","config.c: Use trim() from util.h instead of custom routine.
"
"c8329e3d923e437f344af77ddd9d11dbb0875a37","2012-08-06 22:01:14+02:00","Reorganize util.c so that functions are defined in the same order in which they are declared. Add combinepath function to util.c and use it in config.c
"
"1be8b37cb8f6d3be9e32a79799888d521f623170","2012-08-06 22:01:18+02:00","Remove duplicated section finding code. Found out that there was already a line to NUL-terminate configtext, but don't overallocate anyway.
"
"69eaece1b34e1a451a0d32e16001d63b7839fbe3","2012-08-06 22:01:19+02:00","Remove duplicated section finding code. Found out that there was already a line to NUL-terminate configtext, but don't overallocate anyway.
"
"031b88246b9ba366b1822a64aaed72b3bb9d8d28","2012-08-06 22:01:21+02:00","More malloc+strcpy to strdup replacements
"
"c055f5690a78d7711b14f2e728defc57f9473d96","2012-08-06 22:01:23+02:00","Keep all values on an union instead of having a variable for each type.
"
"97df25f1743b701bf45d9586af9241b7e0312966","2012-08-06 22:01:24+02:00","Add find_section_link to remove duplicated code. Also delete redundant checks since free(NULL) is a noop.
"
"0fdaff33c22b94e79cc58db2686f9fc95e9f07e2","2012-08-06 22:01:25+02:00","Don't risk blowing up a config section to save a small allocation. Minor simplifications related to last change.
"
"bf8a9827183b81e4a974f2cfeeb1cb54e59e04e4","2012-08-06 22:01:27+02:00","Centralize config_var creation code. Note the fixed memory leaks on ConfigSetDefault* in case strdup fails.
"
"639dc4b2d8a8fbdcebf8bdda4dccf2b64d99827c","2012-08-06 22:01:29+02:00","Fix a new memory leak introduced by previous commit.
"
"2c596938166e8d180bce71c509a5c9b14268ca05","2012-08-06 22:01:30+02:00","Compilation fix.
"
"b1549f3064c5e562f4acd33f1a681a6e4ed0cc34","2012-08-06 22:01:32+02:00","Allow config section names of arbitrary length. Centralize section creation code.
"
"464bac4dae9bb1ba71f7626800aca02777ea4637","2012-08-06 22:01:33+02:00","Centralize and simplify alphabetic section finding code
"
"8ed2e2c2a0c80389ed7de168c2d89971dc0ea5e1","2012-08-06 22:01:37+02:00","Remove adler32.c/adler32.h since Zlib provides an adler32() function already.
"
"d8dd5deb52afc950585dc11ede161cff9bf81bdd","2012-08-06 22:01:40+02:00","Replace some clunky string manipulation with formatstr.
"
"6ee6decb195050ffaa42d21ce6e72d6780987669","2012-08-06 22:01:43+02:00","Remove path size limits from screenshots, refactor a bit (not really satisfied).
"
"3616ee67e7d3a5c8edadfa8c3d77796a82eb9416","2012-08-06 22:01:47+02:00","Small fixes and refactorings, including a fix to a free'd memory read in delete_section introduced in one of my commits.
"
"de8a79de9040ceee5f053b523cfc13af075906fd","2012-08-06 22:01:49+02:00","Refactor osal_mkdirp, adding proper error handing and a quick exit path. Windows version is untested yet, will be fixed in a later commit if it's broken.
"
"cab17857a490f4fb8b0dcde90a8189580ec264a6","2012-08-06 22:01:52+02:00","Remove the ROM_HEADER field and the rom_header structure. The clean ROM name is now stored on ROM_SETTINGS.headername (which is properly NUL-terminated). Rationale is that struct rom_header is a duplicate of struct m64p_rom_header, and ROM_HEADER was only used to get the ROM name (and the country code in the goldeneye hack). If you want to access the ROM header fields, you can just cast rom to m64p_rom_header*.
"
"340a6c4b984f5da7d01634d32cf1341f77f8063e","2012-08-06 22:01:54+02:00","Fix M64CMD_ROM_GET_HEADER if the frontend doesn't request the full header (broken in last commit).
"
"2a380c417bd3cc53dfb22b80b6c986c5f48c7c79","2012-08-06 22:01:57+02:00","Move internal parameters from (public) m64p_rom_settings to (private) rom_params. Also, keep ROM_HEADER around (as m64p_rom_header), mostly for future use.
"
"15175668d1a1d6cb87484046ea817dc081b842d4","2012-08-06 22:01:59+02:00","Add a new ROM_PARAMS.aidacrate field, and simplify write_ai* functions. This also adds partial support for the MPAL system type (which has no corresponding country code yet).
"
"ee559d8854693361ee80caaaae338c9db963be84","2012-08-06 22:02:01+02:00","Simplify hexconvert.
"
"9ad0ff3e7f26516af406e2f948343f07dc143ee9","2012-08-06 22:02:03+02:00","Use NULL instead of empty_entry (which is not used anywhere).
"
"c27f12451a74ac3ab0ad9283a0e1e6ebf2db55fc","2012-08-06 22:02:05+02:00","Remove local ROM_HEADER which made the global be NULL. Join the INI parsers on config.c and rom.c, which clarifies romdatabase_open a bit. Also, remove g_romdatabase.comment, since it only signaled the database creation and required several dynamic allocations. Fix two undefined behaviour bugs on romdatabase_open: One call to snprintf with overlapping buffers (while generating g_romdatabase.comment), and a malloc call whose size is potentially zero, which potentally returned NULL and crashed the program (on GoodName handling).
"
"932144f4aa7cfbd5276e588be2130644a4c03531","2012-08-06 22:02:07+02:00","Remove unnecessary temporal variables from parse_md5.
"
"710d278ef231703343bec3cdf2c4fc5842df5f4f","2012-08-06 22:02:09+02:00","Remove duplicate code in the TLBWI and TLBWR instructions (for all r4300 emulators). Use the faster loop version found in the non-pure-interpreter TLBWR implementation in all implementations. Note that this changes the lowest 12 bits in the TLB lookup tables from 0xFFE to 0xFFF, but this shouldn't matter because it is always taken AND 0xFFFFF000 by the emulator.
"
"6eee1673dc29bc2a184658e1a9fac3cb95a3a065","2012-08-06 22:02:11+02:00","Move the TLB lookup table creation code to memory/tlb.c
"
"2440a790f9e75aa06481a8f230322fa7a9e9ecb6","2012-08-06 22:02:13+02:00","Remove useless extern declarations.
"
"112c40c880f2cdfd88e6a46b6513512dd35b7035","2012-08-06 22:02:16+02:00","Do not make ROM_HEADER point to the ROM, because it may be byteswapped by init_memory. Instead, copy the ROM header. Also, use sl() on Manufacturer_ID, due to the structure of m64p_rom_header
"
"d8e7bec734f30ba6284d8dc6685392455f0c1bc2","2012-08-06 22:02:26+02:00","Error error checking to Project64 state saves (More error checks to follow). Map the so called SP_PC_REG and SP_IBIST_REG to rsp_register.rsp_pc and rsp_register.rsp_ibist (not 100% sure, must test).
"
"7e3da35b05baf757784242ad77754564cf74e864","2012-08-06 22:03:01+02:00","Compilation fix on savestates.c. Other compilation fixes for Visual Studio. Minor fixes.
"
"7a776d98304b8b86c0e92b2fe3834bfbef5cf25a","2012-08-06 22:03:08+02:00","Unbreak osal_mkdirp from last commit and document its behaviour.
"
"ec2a2eedee897139b576413d9c4cc8dd2298db33","2012-08-06 22:03:11+02:00","Change ini_parse_line behaviour on comments, not to return the comment starter (config.c expects it that way). Use reset_soft in eventloop.c instead of adding the interrupts directly.
"
"a6757df66009d66ffe06a21c924e6fe257ab2257","2012-08-06 22:03:13+02:00","BUGFIX: RSUB and RNOR shouldn't be compiled on the dynarec if writing to R0; Make free_exec compatible with malloc_exec; OPTIMIZATION: Do not set dst->ops to J_OUT or JAL_OUT if not needed; REFACTOR: Instead of running the dynarec function directly, save it in a variable, then run it if needed. This saves the hack in is_jump, but introduces other duplicated code (I will reverse this commit if it has an effect on performance).
"
"2fdb149da9d5a4054e0080d92b5f412c48545979","2012-08-06 22:03:15+02:00","Add a Makefile switch to enable section timing. Use clock_gettime instead of gettimeofday (which returns wall time). Also remove the useless fflush call which broke compilation.
"
"649823eb9920768ea51cf63fcb24fed8067216da","2012-08-06 22:03:22+02:00","Don't use magic numbers on the profiling code. Indent profile.c consistently.
"
"af7c79fb1f34431db37b57a076b96362f6da9635","2012-08-06 22:03:24+02:00","Remove unused 'source' parameter from init_block. Reoganize NOTCOMPILED.
"
"f7eae9c3590a94f6c3840f1cab7d2c8e12e63642","2012-08-06 22:03:26+02:00","Replace stray tabs with spaces. Always set recomp_func after dst->ops
"
"9d897f887d731d21b9f7a62a17512281c84678e5","2012-08-06 22:03:28+02:00","Add profiling support for Windows.
"
"e205d858cab2e2dcc1d7e7a059a35d1821b3ee2c","2012-08-06 22:03:31+02:00","Lots of fixes for PJ64 state loading. This should fix most crashes. Changes: Add a COMPARE_INT to the queue, this is what fixes most crashes; don't call some update_* functions which have side effects; call some other needed update_* functions; reordered some things. There's a bit of a mess on memory.c now tough. Also, there remain some audio bugs (noise or muted audio), but don't seem to cause any problem outside that.
"
"84b3bef9db38e871b352f69a9ec9bdb863bafdf9","2012-08-06 22:03:35+02:00","Redesign the savestates internal API to be simpler and more extensible. Detect the savestate type when loading instead of doing trial-and-error. Add support for loading and saving Project64 uncompressed saves (those can be generated by PJ64 by unchecking a box in the advanced settings). Also, fix the PJ64 state saving code, which got broken in the commit which was supposed to add error checking. And finally, on error conditions, print the full savestate path, to make things easier for the user. Still lacks checks, endianness handling and some simplicity.
"
"2929e126da366ececa5a66d4cab8633648d483f0","2012-08-06 22:03:39+02:00","Call the new main_* functions instead of calling the plugins directly.
"
"5fa33a93ef7f64d561af4c704799d89417bd6d51","2012-08-06 22:03:42+02:00","Remove unused functions.
"
"d4eb3e1649af3d7bed7643649fd12d4fd56a88dc","2012-08-06 22:03:44+02:00","Don't use global fname at savestates_detect_type.
"
"abd2c8f74da6166d64a3b7e8afcfcad4a19513eb","2012-08-06 22:03:46+02:00","Small fixes for savestates.
"
"eeb552cf6e7c7ba3287e284cdbde39add2ad1732","2012-08-06 22:03:49+02:00","Polish frontend API and docs
"
"673cbfd00692d193048bc8d98c0474170fb64ff1","2012-08-06 22:05:06+02:00","Add missing return to main_reset
"
"04d9e4fb1c9ff98afa68fcd1010dfd0ac287eaec","2012-08-07 22:19:56+02:00","Don't display the volume on the OSD on frontend volume_get_level. Specify signedness of char because the comparison to 0x8b would be false on systems where char is signed.
"
"1937ecaf9e21e95613a19458fe6991a5db130c01","2012-08-09 21:28:12+02:00","Use savestates_clear_job instead of savestates_set_job to release memory.
"
"d0a59fbe5848e7db92d84fe69f7374d82a3eac86","2012-08-09 21:30:59+02:00","Pull latest core changes.
"
"8d74a599d6e4560f7ecf395b3b57c7119c13efd0","2012-08-10 17:54:52+02:00","Plugin.c: Readd l_GfxAttached=1 line which was somehow removed during the refactorings.
"
"9db46fa4e7ddd030f714c699000e9a6d55c45ece","2012-08-15 02:25:25+02:00","Add lots of error checking to the ROM database code.
"
"77c9ea932a724262e50edbe8e97ab51356595221","2012-08-15 02:36:42+02:00","Allow forward RefMD5 references.
"
"536282a526f822122ec6938640b7497868c257fe","2012-08-15 02:42:19+02:00","Fix the ROM database. Fixes Excitebike 64 and maybe others.
"
"3a538efff5d2228a1328518df387f635ab69f4e5","2012-08-15 02:43:40+02:00","Tab fix.
"
"126d6e1d11ea941f5b0937bf356afef58c7421df","2012-08-15 04:27:42+02:00","Experiment: Group all plugin functions in structures, to make it clear through the code where we're using plugins (they look like normal function calls to the untrained eye).
"
"75fa1948fc0fd0fa28b5af0f0bd5a29fe87e271f","2012-08-16 02:32:04+02:00","Initial attempt to make the savestate code endian-independent, compiler-independent and detach it from the emulator's internal representation.
So far only the code to read savestates has been modified. There's no error checking yet, but should be easy to add. A test to load a savestate from another endianness has been successful.
There has been a noticeable file size increment, but there's hardly any way to avoid it. I expect to be able to remove some code from other parts of the emulator once this task has been completed and structures can be modified freely.
"
"3ca17b143ca613fa1d81fc68fb0e9f0941660bd4","2012-08-16 03:47:09+02:00","Bring the new savestates improvements to PJ64 savestate saving.
In addition, this fixes two other bugs to the PJ64 saving code: A out-of-bounds error when writting zeroes to the FCR1..31 field, and a uninitialized value error when writting the EntryDefined field of the TLB.
"
"7035d4b15db1b54565a287cc1f4f3a629728cdf2","2012-08-16 22:27:48+02:00","Finished the new savestate model.
By the way, last commit also changed the way Project64 TLB entries were written, not sure why. I believe they are written correctly now since I'm writting the same register values that are set in the TLBWI/TLBWR instruction. Anyway, I don't think TLB was working anyway since EntryDefined was never set (now it's always set, so it may still not work). This needs more testing agains PJ64.
The big file size increase should stop now, and maybe some cleanup will make up for it.
"
"11a61dda3f1c6d10715115a3dfa5fbb70b3d7b04","2012-08-17 00:19:41+02:00","Remove byte flags from SP_register. More to follow.
"
"4ba11f9e18618b551609caeeb073f3cad34154d3","2012-08-17 02:04:06+02:00","SEE THIS BEFORE PREVIOUS COMMIT. Remove the rest of the memory flags, and correct a bug which last commit uncovered.
Before last commit, SP_INT ORed sp_status_reg with 0x303 (signal1, signal2, halt, broke), but only set the byte flags for signal2, broke, halt (the line for signal1 was commented). This caused a desync between the status reg and the byteflags. Next time update_SP was called, the register was rebuilt using the flags, so signal1 was unset from the status reg.
This commit does not set the signal1 bit in the sp status reg (which is consistent with the taskdone() function on the HLE RSP and the most likely previous behaviour), but this may change behaviour (for the better).
"
"40d68a384f0baf0433a8f88530b647c5717d8f81","2012-08-17 03:11:39+02:00","Remove flashRAM load/save from buffer functions, which are unused following the savestates changes. The old setup was pointless anyway, since it hid the global variables, but provided a backdoor to read and write them anyway.
"
"28742feb7530c7e090e1a1a9e757b54feeebe4ab","2012-08-17 04:35:22+02:00","Use AND+negation to unset bits
"
"15dbffe8f5575cb7a513b347422bcd54a4d1a5a7","2012-08-17 04:59:02+02:00","Merge the status register handling code back to their original functions, now that we don't need to set the byte flags.
"
"be91c75c8e2e82c614061fd34a505ff40f2a8796","2012-08-17 19:14:01+02:00","Set the PJ64 savestate TLB EntryDefined to 1 only if the entry has one of the valid bits set, 0 otherwise. In addition, I confirm that the TLB writing code should be correct since last commit which changed it. The previous code did leave some bits undefined.
"
"22c00013a53620b57c733993a66737ce7cff0d49","2012-08-17 21:43:53+02:00","Join all of the 'access executable memory quickly' tricks in one function.
I'm not sure if NOTCOMPILED is correct, just because the old code was a bit weird and maybe there was a reason for it.
Also, this adds support for executing code from SP_IMEM (this happens on a PIF boot).
"
"30c049b09ba81381e9f4afbdc79a69718fb7a03e","2012-08-17 23:43:01+02:00","Fix a bug that caused a leading space to be inserted to the config file every time it was loaded then saved.
"
"b05457b69396f23407e9d7f1c34dd748dac2c2f0","2012-08-21 13:47:42+02:00","Initial attempt to join the pure interpreter and the cached interpreter main codebase.
This is just the bare minimum for it to work, since there's still some warnings/slowdowns/ugly code which has to be fixed.
"
"4f0298a0aa60b3cfa744d62c59356bda474b44dc","2012-08-21 18:57:48+02:00","Reimplement busy wait optimization on the pure interpreter (I forgot).
I did some small timing tests and I found no relevant difference between the old and the new pure interpreter implementation. So for now I'll center on fixing things.
"
"0a80a2d229517ef96d236f5d3f23c876388fe7bb","2012-08-21 19:24:59+02:00","Fixes for the JALR and COP1 jump instructions.
"
"18e3326d2366ff6a67b91622add860588d0c7a7b","2012-08-21 19:30:34+02:00","Fix the cached interpreter which I broke last commit.
"
"fdb67d06f546da073f2dc802965150a103e342a9","2012-08-21 23:02:34+02:00","- Add the write to R0 checks (which were only on the pure interpreter) to the interpreter code (so now the cached interpreter has it too). I've left it disabled by default on the cached interpreter, just as before.
- Add all the necessary COP1 unusable checks everywhere. There were some checks which were only on pure interpreter, and some which were only on cached interpreter.
- Add the DIV by zero checks to the interpreter codebase (was only in pure interpreter)
- Minor code fixes
"
"ae0d54eaf4d6f6f00dc2062c0948eac118ad0d72","2012-08-23 18:05:38+02:00","Organize the R4300 opcodes in a single cpu_instruction_table structure, as a preparation for the future instruction dispatch simplification. Currently, current_intruction_table is always set to the cached interpreter table.
"
"1f25cc2b2f1b773954b7ad4fa52d5d657d512617","2012-08-23 18:09:56+02:00","Complete last commit.
"
"cc34b8339d5480324a91a8740e9f7c2934faa375","2012-08-23 18:16:34+02:00","Simplify the pure interpreter with the new instruction dispatch implementation.
"
"4c5f3c800059e7f1f63516dd501aa18d5c8aac7d","2012-08-23 18:21:45+02:00","Remove the write to R0 checks from the instruction code, since all instructions are now decoded by recomp.c, which already does the checks.
"
"a0bcd1abcdf0328faf34bbaa7ff694bb50752029","2012-08-23 18:49:18+02:00","Integrate the idle jump optimization of recomp.c with the pure interpreter.
"
"a1712c724f0ca6ba7e9201dfb45827015a43e8b7","2012-08-23 23:47:41+02:00","Do cleanup simetrically and in the same place where initialization was done.
"
"52290dbd59289fb488ac3a91bb23588ea282f87c","2012-08-24 00:18:45+02:00","Pure interpreter: Instead of dynamically allocating a precomp_instr in PC, use a global variable. Now, we can use PC->addr instead of interp_addr, so PC->addr is the instruction pointer irregardless of the CPU mode, simplifying some code.
"
"0911d91861d163b0a4f83acf206b7612545280c8","2012-08-24 17:30:11+02:00","Misc cleanup
"
"6d729c5b81cdf0f08dfad262fa0eb0e0af771123","2012-08-25 16:28:51+02:00","Simplify dynarec and block system setup. Instead of starting executing code straight away after calling dyna_start but waiting until NOTCOMPILED at 0xa4000040 executes to adjust the stack, adjust the stack on dyna_start then call a auxiliary function which sets up the code at 0xa4000040 (which doesn't require special cases now). I don't have access to a 64 bit machine right now so the 64 bit code is untested. Also, remove the old cached interpreter files from the VC project.
"
"2d9bbfc146ab4029e724b5d4baba8318174c6795","2012-08-25 22:16:01+02:00","Move the endian swap stuff to util.c, and fix the rest of the savestates.c warnings.
"
"e10782a0ced01e936280ee14426f9d4094a06f42","2012-08-25 22:27:47+02:00","Don't use debug_count on the expansion pack setup, since it's not saved nor restored on savestates and may cause problems. I don't think this will cause problems, since it usually takes a lot of cycles before another PI DMA is done, and also debug_count just had a value of 0x5002 in all cases I've seen.
"
"9c86c74b4a6471bdee8ea2d1758f40c40482fdfc","2012-08-26 00:49:59+02:00","Unbreak soft reset, which I broke in the commit that introduced generic_jump_to.
"
"252d09f30cfd53a5be6f069e124e6051d03041b4","2012-08-26 02:20:52+02:00","Implement SI register DMA busy bit. Fixes some message spamming (multiple SI DMA interrupts in queue) on diddy kong racing.
"
"8f91e7814492db8701c0ee9a0f389d6e78230283","2012-08-26 13:12:29-07:00","fix several compiler errors and warnings.  fix rjump.c code for 64-bit build
"
"80804a5923076f21c83e4ef20489b0bb3181eebc","2012-08-26 13:49:12-07:00","mask off the rsp register low 4 bits to ensure stack is 16-byte aligned in 64-bit rjump.c dyna_start()
"
"8ebe1bda2d406aa916b0ed00aafd63586c0c31a5","2012-08-26 15:12:49-07:00","update regression test script
"
"ee21a0073c0d6e626409ac02d9e899ad9e5b18ad","2012-08-26 15:33:58-07:00","fix bugs with NO_ASM=1 and DEBUGGER=1 builds
"
"3646c24d721680221544e8023984414c9bb0f891","2012-08-27 17:51:22+02:00","Remove tlb.c (this should have been sone when interpreter_tlb.def was added). Request the RSP to execute a lot of cycles (i.e. run until the end of the task), so the RSP plugin's DoRspCycles method can be changed to execute the requested amount of cycles in the future, which should make it easier to implement better RSP synchronization.
"
"135d83c3468002a5aa719789fab52481520ab800","2012-08-27 22:46:18+02:00","From the changelog:
- Bugfix: Don't assume OSS is installed in all linux systems.
- Bugfix: Some combinations of VolumeSetLevel and VolumeMute caused VolumeGetString to return Mute when not muted
- Make SDL volume handling the default, since OSS is no longer included in the kernel.
- Minor refactoring of volume handling code.

Personally, I would drop OSS support altogether, since it's deprecated (and some 'user-friendly' distros don't have it enabled by default, e.g. Ubuntu), and it changes the master volume level and 'remembers' it when muted (what if two programs did this?).
"
"f37674f32df41462bab8c98661ae294e235d8e95","2012-08-29 03:47:32+02:00","Implement DP freeze bit (or rather, what can be done with HLE RSP and RDP). Properly fixes DK64, BC (intro speed bug, not the crash). FINALLYclear
I'm not sure if the implementation is correct, maybe the SP interrupt must be sent anyway and only the DP interrupt is delayed. Also there's still some polygon glitches and 'DIV_S by 0' errors, but at least it kinda works now, and documents what was wrong with it.
"
"31aaa633abc202e1e2953d78772c3ea67b11ef3a","2012-08-29 22:46:49+02:00","Crash fix for BC which doesn't depend on the plugins CheckInterrupts. This is just here because it's a simple fix and for documentation purposes, because I'll soon implement CheckInterrupts at this branch. Also, for the expansion PAK settings, instead of doing it if Count<0x100000 (which has potential for being run multiple times when Count overflows), do it on the main code transfer. This has potential for breaking some things, so testing is required.
"
"388f321887a3694fc73ba43f15dea24ee3307bf5","2012-09-09 16:15:54-07:00","merged later changes from casualjames branch
"
"57d08111ae9e95938c43ec160ac9b5a50f9da089","2012-09-09 21:54:01-07:00","increased FRONTEND_API_VERSION number for changes in commands, added documentation of api change
"
"d20269d780acf90ff9e99e1c3c4285dc4ac7c925","2012-09-10 11:11:12+02:00","Use test rom from separate repository mupen64plus-test

The test rom has an own repository called mupen64plus-test and doesn't have to
be shipped in tarballs for mupen64plus-core. This also makes the
mupen64plus-core-norom module tarball obsolete because the rom is never
included. The rom is still included in the source and build bundle versions of
mupen64plus.
"
"d2f23bae6b5075dd0cda40888601c0f4ba40c87f","2012-09-11 19:38:32+02:00","Don't free random memory on config option type change

It is possible that the config parser changes a type of an option from any
other type to string. A string is actually only a pointer to another memory
region storing the string. ConfigSetParameter will try to free the old value in
hope to avoid memory leaks. This is a problem when the pointer shares the same
memory region as the previously stored value. The free(..) will try to free a
different part and create a crash at a later point.
"
"0b6d4fa50cf95e6b66ea25d1ed162e35cb029554","2012-09-12 22:47:30-07:00","fix memset parameters from last commit
"
"168ae23a47a9b9fc819f245a92635aa8ead41703","2012-09-16 21:51:23+02:00","Allow to build without OpenGL support for non-OpenGL devices
"
"fd5cd73bd2666239512ff98c75fc6f03b28f357f","2012-09-16 22:24:40+02:00","Allow to build without OpenGL support for non-OpenGL devices
"
"4e66aff82a5a0a13a7c627923976efd5312f6f46","2012-09-16 15:21:44-07:00","merged the split heads, hg doesnt complain
"
"2d5d9a0e431c2f8bb2eeb6ec1c926a83d49c08b7","2012-09-16 16:32:58-07:00","added auto-configs for Logitech Precision Gamepad and MP-8866 Dual USB Joypad
"
"5c1fb934f6d792470754900d37621cef17329fda","2012-09-20 21:31:39-05:00","Restructured Project Folders, Updated Readme

Also updated .gitignore to ignore obj folder

Now that the RAM full of zeros bug is fixed there is no need for 2
folders.
Some java files have been updated since I use eclipse for Android
development and it was complaining about some parts of the java code. I
will try to fix these as I go along when I have time. Also sorry about
the massive commit.
"
"120ad78c25c51bb640f2061d7713ba0d6265c5bf","2012-09-21 17:44:55-05:00","Workaround for fpu.h compile error

In GCC4.6 fpu.h seems to not be able to find fenv.h properly.
"
"297bf896eff016b7554412cca0f0b0a47ded1138","2012-09-21 17:51:10-05:00","Removed main folder since its in jni folder now.

Removing main folder I forgot to remove. This may or may not break some
of the history of the files in the new place, but it will still exist in
the main logs.
"
"b1513a3f4f96f246d8cbeb935066b6c388b38b73","2012-09-21 17:53:10-05:00","Removed .gitignore'd libSDL.so
"
"5a6584583139a7c367d0457114cac3b39a508c9c","2012-09-22 01:29:32-04:00","Several core updates:

From the main repo:

- Added shell32.lib as a dependency to VS project (because some functions like SHGetSpecialFolderLocation are used)
- #define inline __inline in mupen64plus-core for Visual Studio, since 'inline' doesn't work on Visual Studio (2008) for C files.
- Added a reset.c file with functions to perform soft and hard resets
- Add support for multiple path separators instead of just one
- Added a PluginGetVersion to the dummy plugins, so they can be handled as if they were a real plugin
- Added new frontend APIs:
Get screen width
Get screen height
Read screen
Volume up
Volume down
Get volume level
Set volume level
Mute volume
Input callback
Soft reset
Advance frame
Audio callback
Get audio frequency
Read audio samples
Vi Callback

- Reorganized internal rom_header structure so field sizes make more sense
- Added two systemtype and vilimit properties to m64p_rom_settings
so frontends can get this information easily instead of looking at ROM header,
and also simplifies some internal logic
- Some other refactoring/commenting

Do some refactoring around savestates.c. Note the fixed memory leak on PJ64 savestates. Needs testing and more refactoring tough.

Quick fix: Don't pass an uninitialized zip_fileinfo* to minizip, passing NULL is OK and deterministic.

Also some styling within the Java files.
"
"e8c6e0786e25ce2931d133f1892ee341e4242545","2012-09-22 01:57:57-04:00","More core commits:

Main Repo Info:

- Don't limit path length for savestates path.
- Use strdup instead of manually copying.
- config.c: Use trim() from util.h instead of custom routine.
- Reorganize util.c so that functions are defined in the same order in which they are declared. Add combinepath function to util.c and use it in config.c
- Remove duplicated section finding code. Found out that there was already a line to NUL-terminate configtext, but don't overallocate anyway.
- More malloc+strcpy to strdup replacements
"
"466a71f123148c6cea4f70f97e230782d6c6babe","2012-09-22 01:59:34-04:00","Whoops, missed removing a memcpy operation during the merge.
"
"6c576507a1e8c923149079b802a12a8d2c00ad9c","2012-09-22 02:31:08-04:00","More core updates.

Original repo:

- Centralize config_var creation code. Note the fixed memory leaks on ConfigSetDefault* in case strdup fails.
- Don't risk blowing up a config section to save a small allocation. Minor simplifications related to last change.
- Add find_section_link to remove duplicated code. Also delete redundant checks since free(NULL) is a noop.
- Keep all values on an union instead of having a variable for each type.
"
"d8160112663d2ed03b517a9d95c291f82742bdf0","2012-09-22 11:50:39-04:00","More core updates

Original Repo:

-Small fixes and refactorings, including a fix to a free'd memory read in delete_section.
- Centralize and simplify alphabetic section finding code
- Replace some clunky string manipulation with formatstr.
- Remove path size limits from screenshots, refactor a bit (not really satisfied).
- Allow config section names of arbitrary length. Centralize section creation code.
"
"5db68a0adff58e38b382088c0338ab5ef7c0c529","2012-09-22 12:18:41-04:00","More Core updates

Original Repo

- Refactor osal_mkdirp, adding proper error handing and a quick exit path.

- Remove the ROM_HEADER field and the rom_header structure. The clean ROM name is now stored on ROM_SETTINGS.headername (which is properly NUL-terminated). Rationale is that struct rom_header is a duplicate of struct m64p_rom_header, and ROM_HEADER was only used to get the ROM name (and the country code in the goldeneye hack). If you want to access the ROM header fields, you can just cast rom to m64p_rom_header*.

Updated JNI code to reflect the rom header changes.

Should be able to finish most of the remaining updates tonight.
"
"e469ebe4308740e87d6c07fb92ba5370c4813a1d","2012-09-22 11:51:41-05:00","Improved README

Added more details to the README.  A couple of these are specific to Linux, so at some point, useful info for Windows and Mac users should be added.
"
"2590ce471e3ec1fcdad1602aff04fb9d528b9027","2012-09-22 11:59:31-05:00","Edited README formatting

Added extra spacing between sections to make the document more readable
"
"fffa318fcce5ad698f3f6d47aee44080738db532","2012-09-22 12:05:11-05:00","Edited README formatting (again)

Still not satisfied.. I'm picky ;D
"
"370e681fe904127fb83758680b368b1794ab9210","2012-09-22 12:12:42-05:00","Grammar fix
"
"aba9e48cde9532b1ffd4123db7b14f11b079ebdb","2012-09-21 23:20:32-05:00","Update gitignore

Remove libSDL.so since its generated during ndk-build
"
"608e8ccd1592a63bf282061a8cb196cd2a2da95a","2012-09-22 22:19:15-04:00","Core updates:

- Move internal parameters from (public) m64p_rom_settings to (private) rom_params. Also, keep ROM_HEADER around (as m64p_rom_header), mostly for future use.

- Remove unnecessary temporal variables from parse_md5.

- Use NULL instead of empty_entry (which is not used anywhere).

- Remove local ROM_HEADER which made the global be NULL. Join the INI parsers on config.c and rom.c, which clarifies romdatabase_open a bit. Also, remove g_romdatabase.comment, since it only signaled the database creation and required several dynamic allocations. Fix two undefined behaviour bugs on romdatabase_open: One call to snprintf with overlapping buffers (while generating g_romdatabase.comment), and a malloc call whose size is potentially zero, which potentally returned NULL and crashed the program (on GoodName handling).

- Add a new ROM_PARAMS.aidacrate field, and simplify write_ai* functions. This also adds partial support for the MPAL system type (which has no corresponding country code yet).

- Simplify hexconvert.

- Fix M64CMD_ROM_GET_HEADER if the frontend doesn't request the full header
"
"0e624c0793ec1dca24f6ee9afde927a6d1502af8","2012-09-22 23:51:46-04:00","More core updates:

- Remove useless extern declarations.
- Do not make ROM_HEADER point to the ROM, because it may be byteswapped by init_memory. Instead, copy the ROM header. Also, use sl() on Manufacturer_ID, due to the structure of m64p_rom_header

- Remove duplicate code in the TLBWI and TLBWR instructions (for all r4300 emulators). Use the faster loop version found in the non-pure-interpreter TLBWR implementation in all implementations. Note that this changes the lowest 12 bits in the TLB lookup tables from 0xFFE to 0xFFF, but this shouldn't matter because it is always taken AND 0xFFFFF000 by the emulator.

- Move the TLB lookup table creation code to memory/tlb.c

- Error error checking to Project64 state saves (More error checks to follow). Map the so called SP_PC_REG and SP_IBIST_REG to rsp_register.rsp_pc and rsp_register.rsp_ibist (not 100% sure, must test).

- Compilation fix on savestates.c. Other compilation fixes for Visual Studio. Minor fixes.

- Unbreak osal_mkdirp from last commit and document its behaviour.

- Change ini_parse_line behaviour on comments, not to return the comment starter (config.c expects it that way). Use reset_soft in eventloop.c instead of adding the interrupts directly.

- BUGFIX: RSUB and RNOR shouldn't be compiled on the dynarec if writing to R0; Make free_exec compatible with malloc_exec; OPTIMIZATION: Do not set dst->ops to J_OUT or JAL_OUT if not needed; REFACTOR: Instead of running the dynarec function directly, save it in a variable, then run it if needed. This saves the hack in is_jump, but introduces other duplicated code (I will reverse this commit if it has an effect on performance).
"
"f9fd07f359fce40fbcf688dc3e49a2e18cd666d1","2012-09-23 00:37:02-04:00","Core updates:

From original repo:

- Don't use magic numbers on the profiling code. Indent profile.c consistently.
- Remove unused 'source' parameter from init_block. Reoganize NOTCOMPILED.
- Replace stray tabs with spaces. Always set recomp_func after dst->ops
- Add profiling support for Windows. (lol, applied this to stay consistent)

- Lots of fixes for PJ64 state loading. This should fix most crashes. Changes: Add a COMPARE_INT to the queue, this is what fixes most crashes; don't call some update_* functions which have side effects; call some other needed update_* functions; reordered some things. There's a bit of a mess on memory.c now though. Also, there remain some audio bugs (noise or muted audio), but don't seem to cause any problem outside that.
"
"99a065efe976e4fac6a498ad4f07306b57df2ea2","2012-09-23 01:21:34-04:00","Core update for savestates

From main repo.

- Redesign the savestates internal API to be simpler and more extensible. Detect the savestate type when loading instead of doing trial-and-error. Add support for loading and saving Project64 uncompressed saves (those can be generated by PJ64 by unchecking a box in the advanced settings). Also, fix the PJ64 state saving code, which got broken in the commit which was supposed to add error checking. And finally, on error conditions, print the full savestate path, to make things easier for the user. Still lacks checks, endianness handling and some simplicity.

NOTE: I managed to keep the savestates working with the NEW_DYNAREC ifdefs. Yay for code maintaining.
"
"484d9d3b576fce66f527f3ea1bceeb5b274b03b4","2012-09-23 01:58:54-04:00","More core updates:

From original repo:

- Call the new main_* functions instead of calling the plugins directly.
- Remove unused functions.
- Don't use global fname at savestates_detect_type.
- Small fixes for savestates.
- Polish frontend API and docs
- Add missing return to main_reset
- Don't display the volume on the OSD on frontend volume_get_level. Specify signedness of char because the comparison to 0x8b would be false on systems where char is signed.

- Use savestates_clear_job instead of savestates_set_job to release memory.
- Plugin.c: Readd l_GfxAttached=1 line which was somehow removed during the refactorings.
- Add lots of error checking to the ROM database code.
- Allow forward RefMD5 references.
- Fix the ROM database. Fixes Excitebike 64 and maybe others.
"
"839e192c686f829bf1e6d1c82bf242d6a19416ff","2012-09-23 13:31:03+02:00","Don't store mapped host registers on stack before dynarec call

The dynamic recompiler uses a simple register mapping for currently used
registers to reduce memory access for operations. The content of these
registers have to be saved back to the memory region containing the emulated
register bar before they will be remapped or may get damaged by an unsave
operation.

Emulated operations in the amd64 dynamic recompiler tried to avoid the complex
register free'ing operation before an call to a C function by storing the
content of mapped registers to the stack. This implementation is faulty because

* the return address (top most stack position when the dynamic recompiler
started a recompiled block) may get written during the execution of the C
function. The problem is that the return address is moved to another
position when the registers were stored in the stack and therefore the
content of a saved register gets damaged by this write.
* the called C function may want to access the content of an emulated
register. This is done by reading the content of the emulated register bar
in memory. This read will return an outdated value because the new value is
only stored on the stack.

This problem can be avoided without more complicated checks by not saving the
content on the stack and instead unmapping the registers and saving their
content in the emulated register bar.
"
"ac71f08556cc1bf8bfd25831b7d69c1a88b727f7","2012-09-23 22:21:26-05:00","NDK r8b can now compile with GCC 4.6
Problem somewhere in the NDK isnt including the sys-root /usr/include files.
"
"64a9dc9d9a33d1e5271d501d8b3f3d48abab4931","2012-09-24 11:35:41-05:00","Simplify branching reqs, preparing for 1.10 update
"
"6cf5e70e579c78765d73d582c2ae081ef2f25364","2012-09-24 12:09:05-05:00","Another tiny grammar fix
"
"5f1bd300ecd3a17dc3361e00b79ccfe46343d7bf","2012-09-24 16:35:29-05:00","Menu facelift (more to come)
"
"6bc310c4a9d0d7a1865caff0dc18448f91066c44","2012-09-24 20:02:15-05:00","Allow Stretch Screen to be disabled in GLES2Rice
"
"7bd310d8744ec912f8fd090bcb4b20811d44010b","2012-09-25 21:27:32-05:00","preferences_menu.xml didn't commit.. trying again
"
"0380b39a6ab9d48a201e2547eb5e2bfe93b07208","2012-09-26 00:30:45-04:00","Kill onCreateDialog override calls in MenuActivity.java, MenuCheatsActivity.java, and MenuCheatsOptionChooserActivity.java

Added the class AlertFragment.java, allows creation of DialogFragment-based dialogs now, instead of using the deprecated API.

Also makes everything more compact and nice.
"
"eade19cff1ff51e4c12b21285ccb87c59500cff7","2012-09-26 00:03:27-05:00","Menu facelift (languages)
"
"6ec5e15116216ea8307976a0c69704fc1d9ff1ad","2012-09-26 00:03:38-05:00","Merge branch 'master' of ssh://github.com/paulscode/mupen64plus-ae
"
"47b8edf7eee1c89458b7e52c6baa7b7452f20fbe","2012-09-26 07:55:29-04:00","Fix string XML reference in MenuActivity.java
"
"bd31b388f0b34fc83720258ba9495b8c34f3066f","2012-09-26 08:00:49-04:00","Organize imports in AlertFragment.java

Slightly edit the comments in the gitignore.
"
"d9569f68353659350f72d7c29e360413df69bb9c","2012-09-26 18:19:13-04:00","Fix a possible resource leak in TextureFilters.cpp for the Rice plugin.

Also fix a possible resource leak in Config.cpp for gles2n64
"
"3146e75f3c72b51295799e66520bcf82f43bc598","2012-09-26 18:20:53-04:00","Fixed accidental tabs from the last change.
"
"e4fc5ab8433420748becb1d6cf6acd077d6127c3","2012-09-26 18:59:09-04:00","Put bounds checking before array access. Protects against out of bounds errors.

This should never happen, but I did it, because good coding practices never hurt.
"
"a8b92c8bbb18e3e9658825dbf1788d6d4824ef97","2012-09-26 21:23:34-04:00","Core update:

From main repo:

- Experiment: Group all plugin functions in structures, to make it clear through the code where we're using plugins (they look like normal function calls to the untrained eye).
"
"59f3f696b1b558876388c61e877e379eb7372b09","2012-09-26 21:46:21-04:00","Core update.

From main repo:

- Initial attempt to make the savestate code endian-independent, compiler-independent and detach it from the emulator's internal representation.
So far only the code to read savestates has been modified. There's no error checking yet, but should be easy to add. A test to load a savestate from another endianness has been successful.
There has been a noticeable file size increment, but there's hardly any way to avoid it. I expect to be able to remove some code from other parts of the emulator once this task has been completed and structures can be modified freely.
"
"b3a191d33fbfc6126a279882ca0361f6ad0d1058","2012-09-26 20:54:03-05:00","Tagged logic error for someone smart to look at later ;D
"
"978acdfee7b4cec188199251827290b3b4b27cfb","2012-09-26 20:54:20-05:00","Merge branch 'master' of ssh://github.com/paulscode/mupen64plus-ae
"
"e597c86a463783334003c2d4a3788d818d3cb94f","2012-09-26 22:50:06-04:00","Core update

- From main repo:

- Bring the new savestates improvements to PJ64 savestate saving.
In addition, this fixes two other bugs to the PJ64 saving code: A out-of-bounds error when writting zeroes to the FCR1..31 field, and a uninitialized value error when writting the EntryDefined field of the TLB.

- Finished the new savestate model.
By the way, last commit also changed the way Project64 TLB entries were written, not sure why. I believe they are written correctly now since I'm writting the same register values that are set in the TLBWI/TLBWR instruction. Anyway, I don't think TLB was working anyway since EntryDefined was never set (now it's always set, so it may still not work). This needs more testing agains PJ64.
The big file size increase should stop now, and maybe some cleanup will make up for it.

- Remove byte flags from SP_register. More to follow.

- Remove the rest of the memory flags, and correct a bug which last commit uncovered.
Before last commit, SP_INT ORed sp_status_reg with 0x303 (signal1, signal2, halt, broke), but only set the byte flags for signal2, broke, halt (the line for signal1 was commented). This caused a desync between the status reg and the byteflags. Next time update_SP was called, the register was rebuilt using the flags, so signal1 was unset from the status reg.
This commit does not set the signal1 bit in the sp status reg (which is consistent with the taskdone() function on the HLE RSP and the most likely previous behaviour), but this may change behaviour (for the better).

- NOTE: This BREAKS savestates for the time being. There will be no crash in the emulator, but it causes the emu to hang.
It's definitely something to do with the NEW_DYNAREC ifdefs.

Someone who knows a lot about the new dynarec should take a look and see what's wrong. I'd look, but honestly everything is so jammed together in its source file, I can't make any sense of it.

Also, if you do fix it. It would be nice if you could do the changes in such a way that the ifdefs are not needed at all.
"
"fe1fe50d594ec549ef2d72a11fdb3965916e1521","2012-09-26 22:50:25-04:00","Merge branch 'master' of github.com:paulscode/mupen64plus-ae
"
"2c9d030ee39d52bf0de71655997efddf55d30704","2012-09-26 23:20:21-04:00","Core update:

From main repo:

- Use AND + negation to unset bits

- Merge the status register handling code back to their original functions, now that we don't need to set the byte flags.

- Set the PJ64 savestate TLB EntryDefined to 1 only if the entry has one of the valid bits set, 0 otherwise. In addition, I confirm that the TLB writing code should be correct since last commit which changed it. The previous code did leave some bits undefined.

- Join all of the 'access executable memory quickly' tricks in one function.
I'm not sure if NOTCOMPILED is correct, just because the old code was a bit weird and maybe there was a reason for it.
Also, this adds support for executing code from SP_IMEM (this happens on a PIF boot).

- Fix a bug that caused a leading space to be inserted to the config file every time it was loaded then saved.
"
"1b56ea2f95819f59ae7baf86d70ca2ff29ea0270","2012-09-26 23:33:19-05:00","Formatted language list; tagged code requiring Honeycomb
"
"1d5fb35c9ea31cf2c4fbfb86e52a46c5c09bd223","2012-09-26 23:33:59-05:00","Merge branch 'master' of ssh://github.com/paulscode/mupen64plus-ae
"
"7c4e0c1e8d1509ebdc936dae73547a564c7eb247","2012-09-27 17:10:55-05:00","Added built-in USB joystick support, with analog
"
"27be3c79c65d4fdc24342d5c344a5a5a38b60a92","2012-09-27 18:25:45-05:00","Fix for lint being weird after editing @TargetApi
"
"b37993d20baaed4520c97b9b86598c3ef106541c","2012-09-27 18:29:28-05:00","tab vs spaces
"
"a90cf283f8c89d6416ed18334b7ea0b1be6e16b9","2012-09-28 11:24:01-04:00","Tweaked @TargetApi annotations in SDLSurface.java

Removed the all-encompassing Lint suppression at the top of the class.  Added pinpoint suppression annotations in the critical areas.  This will allow Lint to catch other TargetApi issues later as code develops (a good thing).

As an analogy, this is like disabling specific compiler warnings over certain blocks of code, rather than disabling all compiler warnings over the entire file.
"
"e685865c20215f59b229e9aa537e3ec823483ecd","2012-09-28 11:50:47-04:00","Cleaned up typos and formatting for consistency
"
"bad0966eef4ff4418b8d34d39d240dfc5e86a177","2012-09-28 11:54:27-04:00","Replaced tabs with spaces.
"
"93a4323095f7d920a3d63ea1e3201916f79c27ad","2012-09-28 12:41:42-04:00","Fix casing on language names.

Fix a typo in the Japanese Language string. Don't know how the syllabic 'no' got used instead of 'go'
"
"e239318946e81e0c89a3269853db87ba2ddc4f9d","2012-09-28 13:45:39-04:00","Merge remote-tracking branch 'remotes/origin/master' into nativeAnalogGamepad
"
"6b236d33828a9da782f7bd55e42ee230b0712227","2012-09-28 15:30:51-04:00","Simplify ScancodeDialog.java and scancode_dialog.xml

Changed scancode_dialog.xml into a compound drawable. It is basically now a TextView, but with a drawable image positioned to the left of the displayed text.

This allows for removal of LinearLayout and ImageView uses.

This also improves readability slightly, since everything is now contained within one block in the XML.
"
"66170b1d594fba3f7d176f8edeb11983bbac93db","2012-09-28 15:45:08-04:00","Arg.  Fixed tab/space thing in Eclipse.
"
"ed87a617f48e02b0fe5686bd1abcf41ca8d20893","2012-09-28 15:53:55-04:00","Added better rendering for Nexus 7 tablet, now classified in the app as a Tegra 2.

In reality it's a Tegra 3 but this works ok for now.
"
"490d0cd49ff7eb80e10621caa644ddb4a0a6873e","2012-09-28 16:12:42-05:00","Merge branch 'nativeAnalogGamepad'
"
"d9c5f7c27606dd6c7f9fd3fc3e918861af706560","2012-09-29 11:20:05-04:00","fix deprecations introduced when the android support library was updated.

getNotification() is now build().
"
"da93cb698af233ad77ca073c9d5d5d501071678b","2012-09-29 12:52:33-04:00","Clean up/Cosmetic changes.

Declared variables within the for loop structure. This improves readability (no need to look out of the loop for the iterator variable).
Also placed array declarators in GameActivityXperiaPlay.java by the type declaration. It keeps the class consistent with the others.
"
"f77324341fa141a1a8eecee3644f782394a68087","2012-09-30 11:17:08+02:00","Don't try to access uninitialized blocks[x] in dma_pi_write

Signed-off-by: Sven Eckelmann <sven@narfation.org>
---
src/memory/dma.c |    6 ++++--
1 file changed, 4 insertions(+), 2 deletions(-)
"
"ba195256ed0b4d132ff73c2a4c6fcedf588a70a8","2012-09-30 11:17:08+02:00","Synchronize cycle counting between cores

Signed-off-by: Sven Eckelmann <sven@narfation.org>
---
src/r4300/interpreter_cop0.def |    4 +++-
src/r4300/x86/gr4300.c         |    9 +++++----
2 files changed, 8 insertions(+), 5 deletions(-)
"
"81506b856fd22ac285c5dd4ab6f656ea867ef405","2012-09-30 11:17:08+02:00","Merge port of Ari64's new experimental dynamic recompiler for i386

Signed-off-by: Sven Eckelmann <sven@narfation.org>
---
doc/new_dynarec.txt                 |  413 ++
projects/unix/Makefile              |   17 +
src/main/savestates.c               |   25 +
src/memory/dma.c                    |    4 +
src/memory/memory.c                 |   21 +-
src/r4300/interupt.c                |    9 +
src/r4300/new_dynarec/assem_x86.c   | 4364 ++++++++++++++
src/r4300/new_dynarec/assem_x86.h   |   20 +
src/r4300/new_dynarec/linkage_x86.s |  929 +++
src/r4300/new_dynarec/new_dynarec.c |10974 +++++++++++++++++++++++++++++++++++
src/r4300/new_dynarec/new_dynarec.h |   38 +
src/r4300/r4300.c                   |   23 +-
12 files changed, 16834 insertions(+), 3 deletions(-)
create mode 100644 doc/new_dynarec.txt
create mode 100644 src/r4300/new_dynarec/assem_x86.c
create mode 100644 src/r4300/new_dynarec/assem_x86.h
create mode 100644 src/r4300/new_dynarec/linkage_x86.s
create mode 100644 src/r4300/new_dynarec/new_dynarec.c
create mode 100644 src/r4300/new_dynarec/new_dynarec.h
"
"6a09ccfdb04fe4df25f42bf67f55595c25500154","2012-09-30 20:38:54-04:00","Core update:

From main repo:

- Initial attempt to join the pure interpreter and the cached interpreter main codebase.
This is just the bare minimum for it to work, since there's still some warnings/slowdowns/ugly code which has to be fixed.

- Reimplement busy wait optimization on the pure interpreter (I forgot).
I did some small timing tests and I found no relevant difference between the old and the new pure interpreter implementation. So for now I'll center on fixing things.

- Fixes for the JALR and COP1 jump instructions.

- Add the write to R0 checks (which were only on the pure interpreter) to the interpreter code (so now the cached interpreter has it too). I've left it disabled by default on the cached interpreter, just as before.

- Add all the necessary COP1 unusable checks everywhere. There were some checks which were only on pure interpreter, and some which were only on cached interpreter.

- Add the DIV by zero checks to the interpreter codebase (was only in pure interpreter)

- Minor code fixes
"
"c372844342c6d06d6b0585acb637375c94941b7d","2012-09-30 23:25:37-04:00","Fully fix the ROM database yet again. Should be good now.

Also forgot to commit the updated Android.mk for the core.
"
"ad012692bcef36c8d3eb6305c9cfe113ef5603ea","2012-09-30 23:28:33-04:00","Forgot to remove tlb.c. It's no longer needed since the last changes made to the core.
"
"10132f307bd9bf2ead527ff907dfeb8366101af8","2012-09-30 23:33:39-04:00","adler32.c and adler32.h are no longer needed, mupen64plus uses the Adler32 implementation in ZLIB now.
"
"1fd61bae1119ec143299c7c7a40b2dc09da78c5b","2012-10-01 12:07:45-04:00","Replaced some tabs with spaces, also general cleanup.
"
"b8a2cde4e5b399cff2a01ff090193d24b0c0af24","2012-10-01 12:13:46-04:00","Forgot to push this with the last commit, I should seriously squash changes that are closely related.
"
"c03e9702bf2e53e2306c806eacd311fe00b6d14a","2012-10-03 16:44:23-05:00","Fix crash on pre-Honeycomb

Fixed a crash caused by 'implements View.OnGenericMotionListener' in SDLSurface.java.  The fix involves moving the OnGenericMotionListener to a separate class that is only linked with if the device is running a high enough Android version.
"
"f89940a667d02d0ef9c7f2c65012aed2b4ebe9d6","2012-10-04 00:21:12-04:00","Remove unnecessary imports from JoystickListener.java. Also, explicitly state what is being imported.
"
"044e9a4f6dc7a9de0c3b09da461572cb4fbda6c1","2012-10-07 20:15:48+02:00","Don't depend on freetype2 for OSD=0 builds
"
"2688e4db9f39c4e021fbdc063b88836a74a6c21e","2012-10-07 22:08:31+02:00","Disable unused cryptographic functions in included minizip
"
"4f99d4084ecb46c7f25fe04e96064790f5e95378","2012-10-07 22:20:39+02:00","Mark symbols only used in debugger/dbg_memory.c as static
"
"6631f35c6fc8df7fefbb232d6e063b7f51012fe5","2012-10-07 22:30:30+02:00","Remove unused variables from r4300/r4300.c
"
"6732eceee2e5123683dabec3f2feca9d4b8d70c6","2012-10-07 22:32:33+02:00","Mark symbols only used in main/main.c as static
"
"ecedec3b7f73086e4ed9013d5a1cc7c0bd45dbbe","2012-10-07 22:33:30+02:00","Mark symbols only used in r4300/r4300.c as static
"
"f338d51b9fabc01c8335f196b414fdd98ad02207","2012-10-07 22:37:33+02:00","Mark symbols only used in main/rom.c as static
"
"48326c83d90887488dcd9172c158e6c848d697fc","2012-10-07 22:38:05+02:00","Mark symbols only used in main/savestates.c as static
"
"7ae715232353270be80205146574aec3a7dd0194","2012-10-07 22:44:11+02:00","Mark symbols only used in memory/memory.c as static
"
"d5f3ee88b05e822fbd3a8015085c36a68107986a","2012-10-07 22:58:48+02:00","Mark only locally used symbol FIN_BLOCK as static
"
"5dc3a32073cb4bd425e2febc854903c445aea73f","2012-10-07 23:14:58+02:00","Only add gendebug when DBG_COMPARE is activated
"
"31fb39b481650decaeddd698b06acfae740ea48b","2012-10-10 07:59:24+02:00","Allow to change resampler quality
"
"95b879dba10c82e45f01ff239b9c13aff4d492f7","2012-10-10 07:59:24+02:00","Rename NO_RESAMP compile option to NO_SRC
"
"9b27463cfa72a0c64613791292ef8672efc01835","2012-10-10 07:59:24+02:00","Add support for speexdsp resampler
"
"f9af73e4ea85c316dd8ea3953ee2d5b4d7730ea4","2012-10-11 12:38:47-05:00","Added my code formatter

This is the Eclipse Java code formatter that matches my coding style, for anyone who wants to copy it.  It also uses spaces instead of tabs, which is nice.
"
"f9ed8dcf1d1ba88e792196c1c9d4ca9d182befdb","2012-10-12 11:20:27-04:00","Started guidelines folder for new developers.
"
"81d6724a5a29f8783b55ea89124fc3283297d989","2012-10-12 11:23:51-04:00","Added missing drawable resources.

Need to have fallback resources in the default folders.  Added a few extra configuration categories for completeness.
"
"d1ce813cc3f954fc9eda79cf3954d9b4e40029a5","2012-10-12 11:43:10-04:00","Added new preference screen for mapping buttons/axes.

A more visual layout that minimizes localization requirements.

Slightly different interactions with user that permits more flexible mapping implementations.
- Current method: user picks an N64 button/axis, and then mupen listens for input signals and maps the first input it hears
- New method: user presses inputs, then taps a particular N64 button/axis on screen, and then mupen adds the entry to the map

The difference is subtle but important. Imagine that the user wants to map N64 button Z to positive analog trigger.  Many analog triggers produce a value of -1 at rest, +1 at fully depressed, and float values in between.  The native gamepad listener is notified as soon as the trigger changes state from -1 to -0.99.  With the current approach, mupen maps the first thing it hears and thus maps N64 button Z to negative analog trigger (i.e. trigger at rest).  Not the desire of the user.  With the new method, the user can move the trigger through its intermediate states to the desired state, and then ask for mupen to map it.  Problem solved, and equally intuitive to the user.
"
"8ac7ee1360bbbb63203354875fae72b7cbd1c3f2","2012-10-12 11:48:36-04:00","Temporary feature removal: localized string resources.

In preparation for major reworking of preference menu system.  Will significantly ease debugging in the interim.  Feature will be re-inserted if/when the branch is ready for integration with master.
"
"b2814ff4db113390879ad5b9b711483cf4fddfe9","2012-10-12 11:56:34-04:00","[Broken] Commit 1/3: Deleted current menu system (xml and java).

Breaking these commits into parts so that git history is more readable.
"
"8a09bee10662064bc97068327472e325dc6e81a5","2012-10-12 12:12:42-04:00","[Broken] Commit 2/3: Updated strings and implemented new preference menu.

Breaking these commits into parts so that git history is more readable.

Changed string key names to follow a more systematic convention.  Re-localization will be a small chore later, but I think this approach scales better and is easier to maintain.  Also decouples the design elements (strings) from the procedures (java) better.  For example, string key name isn't an abbreviated form of the english string (what happens if the designer wants to change the string? does the programmer update the key name?).  Instead, the new approach uses key names that are organized by the widget they pertain to (key=myExampleWidget, title=myExampleWidget_title, summary=myExampleWidget_summary, etc.)

Changed some of the English strings to follow the capitalization and stylistic conventions officially recommended by Android.  Changed names of some concepts to reduce my own confusion.  E.g. 'touchpad' confuses me because it refers to xperia controls (not the touchscreen); 'gamepad' confuses me because it refers to the touchscreen (not an external gamepad/joystick), etc.

Using Android's built-in Preference classes (CheckboxPreference, ListPreference, PreferenceScreen, PreferenceGroup).  Should make it much easier to maintain and extend the menu system, and reduce the amount of boiler-plate code needed to persist user configuration settings to storage.

Created a convenience class, Settings, which just wraps the native preference data to simplify read access, promote type-safety, and consolidate code maintenance to just a few files (Settings.java and preferences.xml).  Also, makes it harder for run-time errors to hide, since all the 'risky' accessor functions (SharedPreferences.getBoolean, getString, etc.) are consolidated into the constructor.  So we don't have to wait for a corner case to reveal a broken access attempt; instead it just happens up front.
"
"4bebef22d71eae4efa5506b197c9ddf34fb35377","2012-10-12 12:14:41-04:00","[Broken] Commit 3/3: Updated java files to use new preference system.

Breaking these commits into parts so that git history is more readable.
"
"74a2788bd2c2458cf4250243efd4f69457d77b88","2012-10-12 12:20:09-04:00","New universal architecture for input mapping/listening across all hardware/Android versions/IMEs.

Inputs are collected from the hardware (keyboard, gamepad, touchscreen, xperia hw) and converted to an intermediate 'input code' and 'strength'.  'Strength' is always a float in the range 0-1 (NOT 0-80).  For digital buttons, strength only takes on the values of 0 and 1, but analog axes can range anywhere between.  'Input code' is a signed integer that extends the current notion of 'key codes'.  Keys, buttons, and IME-mapped analog axes are mapped to positive input codes in the range 1-255.  Native analog axes provided by Android 3.1+ are mapped to negative input codes, with the LSB encoding axis direction.

Inputs are collected by the 'InputFunnel' class and its hardware-specific subclasses.  Funnels provide a universal language for abstracting away the hardware variations.  E.g. we should be able to make a funnel for the xperia touchpad and integrate it into the architecture as well.  Input funnels are agnostic to all things N64; they merely provide 'input codes' and 'strengths' to the subscribed listeners.

Funneled inputs are mapped to N64 controls using the 'InputMapPreference' class.  This class encapsulates the entire bidirectional map between 'input codes' and N64 buttons/axes.  These maps will be persistable using Android's built-in preference architecture.  Each player's controller will be associated with its own InputMapPreference instance.

Finally, the GameActivity* classes will listen to a single (hardware-dependent) InputFunnel object, and use the InputMapPreference objects to translate from the input codes and strengths to the correct player's N64 buttons/axes, passing them to the core.

Simple!
"
"f43a42b2ed90fca26326c36afec77d1798c4e49a","2012-10-13 08:38:34-04:00","Fix a debug statment in gDP.cpp.

Had 10 formatting parameters but only 9 actual variables being used.
"
"a9840cda261597861a004660824fd10d16d533d9","2012-10-13 08:48:26-04:00","Fix up most of the debug messaging in gles2n64. Fixed the printf formatting parameters.
"
"9392682c2f539ba426836a8013582ee3cddf5ca9","2012-10-12 17:48:35-04:00","[Checkpoint] Stable build, incomplete functionality.

Change summary:
- Moved preference-related java files to a sub-package.
- Moved input-related java files to a sub-package.
- Implemented InputMapPreference.java for mapping gamepad inputs to N64 commands (replaces ScancodeDialog.java, IScancodeListener.java, scancode_dialog.xml).
- Implemented FilePreference.java for selecting files (replaces FileChooserActivity.java, MenuOption.java, OptionArrayAdapter.java, IOptionChooser.java, menu_option.xml).
- Consolidated many global settings into Settings.java (replaces Globals.java)
- Removed JoystickListener.java (functionality will be replaced by KeyAxisTranslator.java)
- Removed AlertFragment.java (not currently used, requires higher API).
- Worked out most kinks in input-related classes (InputMap.java, InputTranslator.java, KeyTranslator.java, KeyAxisTranslator.java).
- Stubbed-out abstractor classes for Sensor, Touchscreen, and Xperia-based input.
- Many updates to string, array, preference XML files, reorganization of menu structure a bit.
- Moved developer guides, config files to separate subdirectory

TODO:
- Figure out why key listening isn't working in InputMapPreference.java.
- Figure out strange focus behavior in InputMapPreference.java.
- Consolidate/remove more global variables into Settings.java.
- Re-wire broken functionality (mostly settings rewiring).
"
"9f7289755264cf87efd299f96f105cd28aa6ac79","2012-10-17 12:01:48-04:00","[Unstable] Continued refactoring, consolidating, *small changes to cpp*.

--> Eclipse's refactoring tools are really impressive.  Highly highly recommend. <--

Broken:
- Force close on game launch.  Menus are fine.

Changelog:
- Moved all native methods into separate java class, and updated function calls in the cpp source to match new names.
- Consolidated all the GameActivity*.java files back into one file (since xperia and default code were practically identical).
- I'm probably ignorant of all the stability ramifications... but it was killing me to see so many duplicated lines of code.
- For now it invokes xperia-play-specific logic based on the user preference... dangerous?
- Seems like there just has to be a way to auto-detect the hardware and take this issue out of the user's hands.
- Lots more consolidation of global variables, game-state stuff, and user preferences.
- Renamed some classes/methods for better consistency, clarity IMO.
- All GUI settings are now persisted through android's built-in Preference system.
- One preference file for user, exposed via menus
- One preference file for device, hidden from user and used by app to persist internal state between sessions.
- gui.cfg file removed.
- Error logging functionality encapsulated into a small class (separate interface from implementation).
- Lots of menu tweaks, resource updates, icon changes.
- Audio and RSP plug-ins can now be disabled.
- Volume keys can be enabled/disabled for use as control inputs.
- Continuing to work on file and folder preference dialogs (far from perfect).
- Two classes at the moment, will merge back to one class at some point.
- Tinkering with implementation, seeing how much mileage we can get with the least amount of code.

TODO:
- Continue consolidating globals, reconnecting functionality.
- Identify cause for force close on game launch (need to git bisect).
- The play option in main menu should be disabled or not present until a game is selected (or possibly bring up the file browser)
- The ROM selection file browser should start in [sdcard]/roms/n64/ by default, or [sdcard]/ if it doesn't exist
- Improve file/folder preference dialog
- The radio button next to '..' and other folders looks out of place; will likely be confusing to new users
- Improve input mapping dialog
- Improve user friendliness
- Is it necessary to have user hold down an icon while pushing a button at the same time?  A listener that pops up after selecting a button to map is more intuitive.
- There needs to be a way to unmap a button [Actually there is, it just needs to be obvious]
- While it shouldn't be necessary to show what key a button is mapped to, it might be good to somehow indicate if a button is not mapped
- Figure out why key listening isn't working in InputMapPreference.java.
- Figure out strange focus behavior in InputMapPreference.java.
"
"98682ed0f7a192aca7dafc73644f141e263768d6","2012-10-23 14:39:00-04:00","[Checkpoint] Major refactoring, stable menus, broken emulation.

Changelog:
- Major refactoring over entire source.
- MenuActivity, MainActivity, GameActivity streamlined a bit, implementation broken down, some moved to feature-specific classes.
- Trying to factor touchpad and touchscreen code into a common abstraction (AbstractController.java), still a lot of work to do, left it pretty messy for the moment.
- Migrated many global variables into classes, limiting many to local scope now.
- Renamed a lot of classes and functions, trying to use a consistent taxonomy of names to highlight code structure and class relationships (e.g. AbstractController, TouchscreenController, XperiaPlayController, GamepadController)
- Added more subpackages to simplify code browsing and highlight code structure.
- Activities and views still in root package.
- Utility classes in 'util' subpackage.
- Classes relating to persistent data (appdata, user prefs, pathnames, etc.) in 'persistent' subpackage.
- Controller abstractions (touchscreen, touchpad, gamepad, etc) in the 'input' subpackage.
- Hardware listeners and translators in 'input.transform'.
- Migrated a lot of app data to a SharedPreferences-based implementation, to simplify persistence, access, and reset.
- Expanded the convenience/wrapper classes that simplify and speed read access for user prefs, app data.
- Consolidated native code into NativeMethods.java
- Just a bunch of wrappers, implementation in focused classes.
- Names properly updated in the C++ code.
- Notification (toast and status bar) encapsulated in a simple class, callable from any activity.
- Re-implemented the file/directory preference (PathPreference.java) for more intuitive behavior.
- Removed radio button icons (confusing)
- Optionally, user can be limited to selecting only files or only directories
- This option can be set in the XML file
- Simplified the selection of touchscreen layout (layout and size are separate options).
- Added a user preference for the save-game location.
- Moved the ingame menu definition to an XML resource, removed exit function from menus.
- Lots of tweaks to various XML resource files
- Removed some obsolete activities from AndroidManifest.xml.
- Thorough javadoc comments for a number of files.

TODO:
- Diagnose and correct force close on game launch (something broke during refactoring)
- Get basic emulation capabilities back up and running
- Continue consolidating globals, reconnecting functionality.
- The play option in main menu should be disabled or not present until a game is selected (or possibly bring up the file browser)
- Improve input mapping dialog
- Improve user friendliness
- Is it necessary to have user hold down an icon while pushing a button at the same time?  A listener that pops up after selecting a button to map is more intuitive.
- There needs to be a way to unmap a button [Actually there is, it just needs to be obvious]
- While it shouldn't be necessary to show what key a button is mapped to, it might be good to somehow indicate if a button is not mapped
- Figure out why key listening isn't working in InputMapPreference.java.
- Figure out strange focus behavior in InputMapPreference.java.
"
"e3458062893f8a7ac6a0d78e3c25e72ace0c32b8","2012-10-23 14:59:17-04:00","[Checkpoint] Basic emulation capability working, touchscreen controls and in-game menu broken.

Stupid bug in UserPrefs.java - isLastGameNull was computed improperly, so app was just exiting, as per design.
"
"0ae8f8ce8ba423bc9c4ed56dd5c616ca558bc11e","2012-10-23 23:41:32-04:00","[Checkpoint] Touchscreen controls and in-game menu functional again.

Changelog:
- Touchscreen controller functional again.
- In-game menu functional again.
- Changed slot menu item behavior in in-game menu (now provides a dropdown to select the slot directly).
- Fixed bug in hardware type not persisting properly.
- Removed some of the System.exit(0) calls.
- Changed activity finish() semantics to better follow recommended practice (I think).
- No longer finish() MenuActivity when GameActivity starts.
- Reduced number of System.exit(0) calls.
- GameActivity calls finish() from ingame menu, and Android naturally pops the stack and brings the last MenuActivity back to the foreground.
- We still call finish() on MainActivity after it launches MenuActivity, since we never want to return to the splash screen.

TODO:
- Returning to MenuActivity from GameActivity still creates a force-close -- may be a threading issue, other thread calling stale objects
- ResumeLastSession==true causes the emulator to hang when GameActivity is launched.  Temporary workaround is to set to false.
- The TODO's in the last commit still apply.
"
"4a68ccc6495ea0415927e34ac11a4d90d8acf96a","2012-10-24 16:13:57-04:00","Japanese translation for the new UI.
"
"f00b6feaeaa7c29f06b07bbd960eb9a471d02de5","2012-10-24 18:29:56-04:00","Missed a string for the Japanese TL. Also fixed spacing in one string.
"
"1c7d9e3540a934ea3af9ba2e492844b1344576be","2012-10-24 22:08:49-04:00","Custom touchscreen skins functional again, and more refactoring

Changelog:
- Custom and standard touchscreen skins available in preferences (a
little different organization than before).
- All translatable strings moved out of res/values/arrays.xml and into
strings.xml.
- All translation done by overriding one file, strings.xml.
- Old method with raw strings in arrays.xml could lead to code
maintenance issues as more elements are added to the array.
- Moved some string literals out of the java code and into strings.xml
- Changed pattern in MenuActivity.java for accessing menu items (from
object comparisons to key comparisons), simplifies code maintenance
and extension a bit.
- Layout and menu resources now named after the class they're used in
(simplifies lookup).
- Minor code tweaks (formatting, comment touch-ups, etc for consistent
look and feel).
- Trying to reduce the size of some class implementation by factoring
out utilities, etc. into other classes.  For now Utility.java is
a dumping ground to be cleaned up later.

TODO:
- See last
"
"6abd165a7efb99a7ef4324f1b8c5febfd2fb3b71","2012-10-25 08:54:36-04:00","Simplification in PathPreference.java (get rid of a for loop)

Clean up the horrible looking array declarations at one part in SDLSurface.java

Also fix some javadoc params.
"
"55fb2193d8338ffadea532445aed0c0a6fe39ac4","2012-10-25 08:57:24-04:00","Remove a static modifier that slipped through.

Wish I'd have caught this before committing.
"
"b5293d29fd6464fdb4d82eea328fa053a8199a26","2012-10-25 10:07:08-04:00","Centralize the Controller button/stick values into its own class. Now this doesn't need to be pasted in both controller classes.

Fix up XperiaPlayController.java a bit. Removed some redundant code, used the Utility equivalents of Point, etc.
"
"d7ab8b6ebece24a93326ae7f66bb478b8b6a4afc","2012-10-25 09:57:42-04:00","Minor changes to class names, strings, comments

Changelog:
- Renamed GamepadController to PeripheralController, since it
encapsulates many types of peripherals (keyboard, gamepad, joystick)
- Added some comments to clarify AbstractController architecture.
- Fixed a few broken string resources/keys
- Added annotations to disable code formatter in some places
"
"9b1aefdfa14207edc6bb9ae76062a39254b21cdc","2012-10-26 12:38:45-04:00","Add more information to the class javadoc descrfiption of Controls.java
"
"bead36da5e626750c2ad33748a93cdc270b19ec9","2012-10-26 13:21:10-04:00","New input mapping screen working much better, language settings added

Changelog:
- InputMapPreference now behaves much more like originally intended
- Unmapped buttons are faded for Honeycomb+ devices
- Properly listens to keyboard/buttons now
- Fixed all the focus kinks that were messing up analog listening
- Does a good job identifying and compensating biased inputs now
- Added a language preference to main menu
- Was so easy to implement, why not (plus simplifies locale testing)
- Just kicks the user out to the system locale settings
- But it looks seamless :)

TODO:
- Input unmapping is easy but not obvious to user
- Fix interaction with user for buttons vs. axes
- Hold the axis, then touch icon
- Hold the button, release, then touch icon (confusing, fix)
- Diagnose and correct force close on game launch
- Can we put touchscreen and xperiaplay under AbstractController?
- Clean up gameactivity, sdlsurface, touchscreenview (I made a mess)
"
"4227b52129a4b95e52f997691f7df3fcd7412fa6","2012-10-26 14:51:55-04:00","- Make Controls.java an interface since its more appropriate (Only holds constants)

- Simplify an Image constructor in Utility.java

- Attempt to clean up ConfigFile.java

- Remove an unecessary null check in ConfigFile.java (it's handled by the try-catch block)

- Add explicit Override annotations to some methods.

- Give a name to the Audio thread (Will make debugging less painful in the event a problem with audio happens).

- Fix a logging message relating to the audio buffer write methods (Both byte[] and short[] methods had the same error logging message).

- Misc cleanup.
"
"4b50ca6a983e70766c2ddf7bdcf22ea94bbb7975","2012-10-26 17:05:22-04:00","Tweaks to input map visuals, some strings

TODO:
- Just realized that I borked DataDownloader a few commits back.
- I disabled the ResetAppData menu item to avoid problems until fixed.
"
"d9743e883d0977ea46678dc4a5bb5be89f1dc200","2012-10-26 17:25:41-04:00","Fully move XperiaPlayController.java over to using methods within Utility.java instead of using its own Image class.
"
"882e568bf4d81f1d0a45b2ae14f18fbb7cdc9dbd","2012-10-26 17:32:14-04:00","Forgot to remove unused imports in XperiaPlayController.java
"
"c6791e28721be9f68fa84de33e4544bb3c1afaf7","2012-10-27 22:07:53-04:00","Fixed remaining issues with inputmap preference

Changelog:
- Unmap inputs by long-touch
- Uniform behavior between analog and digital buttons
- Discovered and fixed issues with really gamepads
- New gamepads send input only when it changes
- Some old gamepads (e.g. Logitech Wingman Rumblepad) send inputs
constantly even when it hasn't changed
- Added hysteresis to the input listener so it wouldn't get swamped
- Cleaned up some odds and ends in the layout file
- Starting to wire up new input architecture to test
"
"705bca4cea4855f1874ffa0378aa673a7e68887c","2012-10-27 23:02:46-04:00","More tweaks to InputMapPreference

- Removed superfluous stuff in some resources
- Tweaked the help text
- Tweaked some colors for older APIs
"
"801f6044ba7eb66a9801acf65275d076dfe20c9a","2012-10-28 11:09:10-07:00","merge with no changes
"
"91047a69d7e5cfa9e3f4b33a3365df6581fc0a79","2012-10-28 14:20:08-04:00","Cleaned up the drawable resources

- Removed unneeded png files
- Removed unneeded mdpi folders (default already assumed mdpi)
- Added hdpi, xhdpi versions of new icons
"
"e7a9a464bb5fda05af2df1fe5255139f679007fe","2012-10-28 11:23:09-07:00","merge with no changes
"
"43efc79701f13df22a97c299b829fb2eb972dde5","2012-10-28 11:28:13-07:00","merge with no changes
"
"e42342c234f24b1ee0dc592ff82231d5ded26890","2012-10-28 11:43:13-07:00","update wiki documentation for sdl-audio plugin resampler changes
"
"5b43374d9c1e26f4b69750f9385faf331d8de37a","2012-10-28 11:51:28-07:00","update HuiJia USB GamePad configuration from Adriano Lols
"
"c39cfa771f0c0298a77b4248d2e5e994cd4b35dd","2012-10-28 21:27:45-07:00","fix in autoconfig ini file from Bobby Smiles
"
"8730973a74c206719e6884e5a437bb800ea1d944","2012-10-29 16:25:40-03:00","Use proper markdown for list-formatted numbers in the Readme.
"
"8831b240837520ee097b320f675786fca4d10bcb","2012-10-29 16:22:38-04:00","Big update, new input architecture, less SDL, more modular

Changelog:
- PeripheralController fully wired up using new input architecture
- Slowly migrating touchscreen controls into new input architecture
- Teasing apart graphics from controls for touchscreen controller
- TouchscreenView, TouchscreenController, and Globals are still
tightly coupled
- Removed some onSDL functions
- Extracted all control/touch related functionality from SDLSurface
- SDLSurface now contains just rendering stuff (GL state, etc.)
- SDLSurface significantly smaller
- Eliminated some calls from Java to JNI (no longer needed)
- onKeyDown, onKeyUp, onSDLKeyDown, onSDLKeyUp, onTouch
- Disconnected XperiaPlayController from TouchscreenController
- Might have gotten coupled in the refactoring process
- Put the Xperia Play activity back in
- GameActivity and GameActivityXperiaPlay are thin classes that just
call into GameImplementation
- Like before, just consolidated further
- Fixed bug in InputMapPreference (R and L buttons swapped)
- Fixed bug in AbstractController (joystick only worked for left/up)
- Fixed improper string equalities in UserPrefs.java
- Removed volume key control preference (will soon be unnecessary)
- Commented out player 2-4 preference for now until ready to tackle
- Changed some global variable names for consistency, clarity
- Added some missing comments and override annotations
- Added some Xperia Play reference material

TODO:
- Continue decoupling touchscreen graphics and control
- Finish migrating touchscreen to AbstractController subclass
- Migrate Xperia Play controls to AbstractController subclass
- Test Xperia Play stuff
"
"0120e11b5a068b0ee373c67e2d50110ab827e989","2012-10-29 22:59:18-04:00","Reduce scope of a variable. Also this is more informative than having it at the top of the method.

(even then, for loops should have their respective index variable declared inside of it).
"
"af33d17470f41382d9fb0ddb49eee298c072ec23","2012-10-29 23:06:29-04:00","Styling. Also, I realized Controls should be a class. It shouldn't be an interface since it doesn't really provide a basis for a new data structure.
"
"c50310dca5f84689a1848982f475c0987f7e4714","2012-10-29 23:14:58-04:00","Unnecessary null check removed.

Look at the while loop.

If section.nextName is not null, and sectionName is assigned section.nextName, then it is not null as a result.
"
"a861db1b61eae0304937e39d0dde22291ff38050","2012-10-30 00:14:14-04:00","Little polishes

- Removed some more global vars
- Added comments, todos
"
"1a19da60cdcbcd78870c499c9346a639c1875f71","2012-10-30 08:03:46-04:00","Remove some unused imports.
"
"caaecf1ccb56c1e9ffef9a0846fc71a9bb6ff8e6","2012-10-30 10:29:19-04:00","Confirm a TODO in SDLSurface.java

See http://hg.libsdl.org/SDL/file/2ff08dd2e5e4/android-project/src/org/libsdl/app/SDLActivity.java

Chances are, the force close in that one thread block can be fixed too, though you'd have to update SDL.

In some commits/revisions theres a mention of fixing 'resume' status, so that may want to be looked into as well.

Though I'm entirely guessing that this will be a potential way to fix it.
"
"761368ea9968d40d381042231de899bd87397138","2012-10-30 10:58:21-04:00","Little tidying.

- Added a TODO that I'll probably finish sometime this week.
"
"cc33e228b35e1298c15cb6a171e53ea84cce45bf","2012-10-30 12:35:40-04:00","Fixed force-close bug introduced in my last push
"
"b0796b3b2f8c3001bb29995f5a73e0518910d64a","2012-10-30 15:10:56-04:00","- Javadoc styling.
- Now the class level javadoc for ConfigFile.java, when properly rendered, looks quite nice.

- Fix an array declarator, now it's 'proper'

- Also rename some single letter parameters into something more descriptive.
ie View v is now View view.
"
"fa1286056780fb58f8e5686445d99c26d5b76399","2012-10-30 15:11:34-04:00","Merge branch 'concept_menu_prefs_inputs' of https://github.com/paulscode/mupen64plus-ae into concept_menu_prefs_inputs
"
"9ae06483388a52186603aee8c5b37d7d4d5f2261","2012-10-31 10:02:32-04:00","Wired up UserPrefs to sync config files

Changelog:
- Streamlined config file write process
- Immediately before GameActivity launches, mupen64plus.cfg and
gles2n64.conf are overwritten using data stored in UserPrefs.java
- Those two files are no longer read from java (they are strictly
dependent on the userprefs data) and are only used by the JNI code
- mupen64plus.cfg has been stripped to a minimum (no more SDL keymap
stuff since this is handled by java frontend)
- Removed gui.cfg and mupen64plus.cfg from the assets.zip file (the
former is no longer used and the latter is always overwritten)
- Removed Updater.java, since some of its functionality now subsumed
by the new system, and because it will probably need to be changed
a lot before a 2.0 release anyhow.
- Put the volume keys option back in since it's just easier that way
- Changed some UserPrefs field names to be more descriptive/clear

TODO:
- It's entirely possible that I was too aggressive when trimming the
config files... need to confirm
"
"a52f71058749114253e4ee8d22c24c5ea0d07739","2012-10-31 10:17:10-04:00","Merge branch 'concept_menu_prefs_inputs' of https://github.com/paulscode/mupen64plus-ae into concept_menu_prefs_inputs
"
"2cab3be5e6221dd7bd8afbb9bbd45d3ded27886e","2012-10-31 11:06:12-04:00","Tweaked some strings, comments, formatting
"
"56b62b2c1a435853665e077230dab1674186cf41","2012-10-31 11:07:36-04:00","Removed OnResume from GameActivity*

* Not sure why this was necessary, but I might be ignorant.  Please
correct me if I'm wrong.
"
"bcfc047df98d006bf8254d4af453bb80098caab5","2012-10-31 11:08:18-04:00","Fixed DataDownloader (I had accidentally broken it)
"
"4532323d7c833eaf4c4c38a51c78fbcfd6617fe1","2012-10-31 11:49:19-04:00","Refactored DataDownloader into smaller methods.
"
"74ecb5ef15835c5ac4ed58f6d948bf5b6e9bf91d","2012-10-31 13:29:05-04:00","Updated some preference strings and comments
"
"d84b1d53b8ca033a0c6bddb926062c44ed2dfdca","2012-10-31 13:29:37-04:00","Moved InputMap into a different namespace
"
"60dcc390efed235baee1a9b56975abfeacd5a11e","2012-10-31 17:28:43-04:00","BufferedReader wasn't closed once it's done being used in ConfigFile.java
"
"39288f9dab6789ab8a760e45fb02788721d9243a","2012-11-01 13:26:22-04:00","Decoupled the touchscreen code into 3 classes

- TouchscreenSkin.java encapsulates all the layout info/files
- TouchscreenController.java interprets user input and calls the core
- TouchscreenView.java draws and refreshes the on-screen elements

TODO:
- Not fully debugged
- Implement a publish-subscribe model so that the view updates when
things change
- Fix intermittent touch bug introduced during refactoring.
"
"0b7dfe2fd28462cee5b86d30a348dc2eda25e59a","2012-11-01 16:30:30-04:00","Removed possibility to accidentally unmap via normal click
"
"a02d1cc4bf9631caba6f82eca563415b9057ff36","2012-11-02 00:22:51-04:00","TouchScreen integrated into new input architecture, mostly debugged

Changelog:
- Eradicated all global variables except for a few flags
- Removed a lot of the extra threading mechanics
- Didn't seem to affect me on a Nexus 7, but maybe it's needed for
slower devices? I'm probably ignorant of something important...
Please correct me if I'm wrong...
- The RedrawThread was removed in TouchscreenView.java
- The actionbar toggling thread was removed in GameImplementation
- Removed status bar notification for now... not sure what it's for
- Fixed a bug with FPS user pref not being retrieved correctly
- Migrated Controls.java stuff into AbstractController
- Emptied out XperiaPlayController.java in preparation for its remake.
- Changed name from TouchscreenSkin to TouchMap
- With a little more refactoring will be usable for Xperia controls

TODO:
- FPS not printing properly
- Enabling FPS inhibits redrawing analog stick (maybe this is what
the threads are for)
- Calling invalidate on a subregion in TouchscreenView doesn't seem to
produce the desired effect
- Implement XperiaPlayController by following a similar pattern
- Refactor TouchMap a bit more so for use with XperiaPlayController as
well as TouchscreenController
"
"7046c1d455d6593d9b70707c9bf7909516e6f904","2012-11-02 11:15:16-04:00","Touchscreen system fully functional under new input architecture.

Changelog:
- Framerate indicator works fine, without resorting to extra threads
- Further encapsulated TouchMap functions
- Eliminated public fields
- More generalization for use with XperiaPlayController
- TouchscreenController and TouchscreenView are lean and mean
- Starting to implement XperiaPlayController, based off same
TouchMap class for the heavy lifting
- Removed duplicate Button index constants across multiple classes
- Removed custom Point class, now using Android built-in class

TODO:
- Test touchscreen on slow devices, make sure doesn't cause lag
- Small bug, FPS indicator doesn't refresh if touchscreen disabled
"
"a6ddf3a150d15c4b3bfad3af5b629be49f682a8e","2012-11-02 11:18:14-04:00","Merge branch 'touchscreen_integration' into concept_menu_prefs_inputs
"
"5302e655ac8ccd03528ae091abb7af246f07be69","2012-11-02 11:31:48-04:00","Removed obsolete RedrawAll touchscreen preference.

Since TouchscreenView covers the whole screen, and since all drawing is
performed manually in onDraw() (ie. not automatically by View objects),
calling invalidate(Rect) for any size rectangle will always do the same
thing as calling invalidate().  Hence you always need to redraw the
whole view as far as I can tell.
"
"2c3a44fe61cce1f2523b7d9f1242c972730ad6d7","2012-11-02 13:10:27-04:00","Created CoreInterface to systematize preparations for core startup

Moved various static methods into a new class and created a gateway
method to ensure objects used by the core are synchronized properly.
This is much safer and much easier to maintain than having a bunch of
global objects/singletons and requiring client code to properly set
each one at the right time.
"
"d13f88865504f662ece5b8be198c10f80259b76c","2012-11-02 13:21:07-04:00","Cleaned up last commit a bit more.
"
"2bfc602551df06cd0c3019244c12a0b8742c7028","2012-11-02 14:27:33-04:00","Added menu item to show device info (proc/cpuinfo)

Menu item located in Settings->Other->Device info
"
"0fa3e2c11a0e4c8e52b5ac320a9853a59be7f232","2012-11-02 14:50:34-04:00","Autoformatted all the Java, updated author names as best I could guess.

Eclipse formatter settings in guidelines/config_files
"
"b82182178fcec16f16a8dc784499e4bc8c4d3b11","2012-11-02 20:27:39-04:00","Fixed FPS bug when touchscreen disabled, added more TODOs in Globals
"
"aaf63812db39a1c7aa757cee0660f4e3832dea02","2012-11-03 00:04:41-04:00","Implemented new method for determining whether to resume last session.

With the old approach, the app shouldn't resume the last game if the
user picked a new ROM in the interim.  This required some book-keeping
in the app, which was implemented with the global resumeLastSession
flag.  The new approach uses a different auto-save file for each ROM,
so that the correct savefile will always be used for the selected ROM.
This provides an additional benefit in that the user can bounce between
different ROMs without losing auto-save state for each game.

The auto-save filename is generated from a hash of the ROM's full path.
"
"736fbae83900319049336146e6a932c1cd039c5f","2012-11-03 09:33:19-04:00","Integrated mupen64plus-ae arm assembler
"
"dcc6e670da4b139531b7e5198cc48d601e500a67","2012-11-03 11:04:41-04:00","Implemented in-game 'Save as...' functionality
"
"57ee9d75560ad078d6d2ea1058eb92cf83ca8ae3","2012-11-03 13:11:55-04:00","Implemented in-game 'Load file...' functionality

Streamlined PathPreference in the process, moving common functionality
into new class, FileUtil.
"
"99e21f38eef759f5798ea39c44a523f431f3bd9d","2012-11-03 13:28:05-04:00","Moved Image to its own class, made some immutable fields final.
"
"81fbacef9fc634d0c09d0321300f8a3f37bbc3b0","2012-11-03 14:05:39-04:00","Cleaned up Utility class by organizing into separate classes.

Cleaning up the mess I made while refactoring.
- General file stuff moved to the new FileUtil class.
- 'Safe' wrapper functions moved to new SafeMethods class.
- ROM manipulation/reading stuff remains in Utility, may move later.

Also added Javadoc to some utility classes.
"
"c2b9f086debcb62aeabed6a8bfd192faa9e1a690","2012-11-03 15:17:20-04:00","Disable Xperia PLAY menuitem if not applicable

For now, just checks Android ver, so it's a conservative test. Once we
know the Xperia PLAY hardware strings, we can be more aggressive.
"
"56e781729c10a9061938e01bb182fc88c1f7cbde","2012-11-03 15:53:44-04:00","Fixed crash when input plugin disabled and screen touched.

Just realized that input plugin relates to all AbstractControllers, not
just peripherals.  So we don't instantiate any AbstractControllers if
plugin is disabled.

TODO: Restructure the preferences menu a bit so that this relationship
is clear to user.
"
"44f267e11bc730b8f881e2f443c50aa5be6dbc3c","2012-11-04 01:07:56+01:00","Fix build of the armel assembler of new_dynarec
"
"ee6058ce9edd3a1139c24043a9b30372ae8d81a2","2012-11-04 01:13:40+01:00","Remove unused symbols of the armel assembler
"
"7126a3ecf4508c1cae54594d0d6b5821a2e22f92","2012-11-04 01:25:07+01:00","Add configuration for semi-supported architecture armel
"
"3e14a9b78e1784ec5a904a34342696c706887544","2012-11-04 01:25:37+01:00","Add configuration for semi-supported architecture armel
"
"e080396a73ef1a7c29190e16c08db83c58938200","2012-11-04 01:26:09+01:00","Add configuration for semi-supported architecture armel
"
"b05ff7522a9059a9bc2e01431ac482523c8c3db9","2012-11-04 01:26:41+01:00","Add configuration for semi-supported architecture armel
"
"604872c5ba185f34d8ad9db0936c45911256dd5e","2012-11-04 01:28:01+01:00","Add configuration for semi-supported architecture armel
"
"8b2e163a75916c0b15d4057fb5b61a589bccb77b","2012-11-03 23:04:11-04:00","Fixed peripheral bug (accidentally created a few commits back)

Removed the word 'gamepad' in all the preference/string keys, using
'input' instead.  Bug created when I changed some but not all names
and didn't reference properly in the java code.
"
"5eff32b0c3662d8946a00e5c839524f92ce2d6f8","2012-11-04 21:48:39-05:00","Added support for mice & unusual gamepads/joysticks.

Some older gamepads use non-standard ranges of motion when reporting
analog axes.  For example, the Logitech Wingman Rumblepad (ancient!)
maps right stick up/down to AXIS_THROTTLE and produces values in the
range [0,1] rather than the usual [-1,1].  This mod re-scales and
normalizes the axis values to [-1,1] for all MotionEvent data.

An interesting side-effect is that mice can be mapped to the N64 analog
stick as well. Mice produce AXIS_X and AXIS_Y values just like a
gamepad's left analog stick. However, values refer to pixel location on
the screen, not float values between -1 and 1. With this modification,
mice data is rescaled so that mouse at center of screen is equivalent
to left stick at center.  In game, it's kind of funny to watch Mario
chase the mouse pointer...
"
"b4c5092ea90c6a57807ed57ac0e8db9ba419aa66","2012-11-04 21:51:22-05:00","Forgot to update manifest when adding Xperia Play NativeActivity stuff.
"
"a10e5df902da99ca32949dbe31665b6270c28624","2012-11-05 09:13:58-05:00","Styling in Utility.java, also added a basic javadoc explanation for the class.

Fixed a TODO in NativeMethods.java

Replaced some string literals with char literals where appropriate.
"
"08b33e7964e20da25548ed2a9558f82150a3c1e9","2012-11-05 09:34:40-05:00","Fix log messages.
"
"9dbfa91b5dc093691029548073cea3259cf6be8f","2012-11-05 12:08:05-05:00","Update logging messages.
"
"bd9abb69ceb2ce88aded243b1c0edd2b462ac2f9","2012-11-05 14:16:20-05:00","Refactored TouchMap into parent and child classes.

In preparation for implementing XperiaPlayController.

Touchmap implements file loading and touch-to-button mapping.
VisibleTouchMap extends TouchMap by including FPS & drawing functions.

TouchMap functionalities are used by both XperiaPlayController and
TouchscreenController.  VisibleTouchMap capabilities are only used by
TouchscreenController.
"
"f193982cfa57ec56eb0ce11903b3cce66c2f9a74","2012-11-05 14:57:30-05:00","Make clamping methods in Utility.java this makes it much easier to see which values are clamped.

Ie) Utility.clamp(value to be clamped, minimum value, maximum value)
"
"c36f9fad595e2e02f079e002701afe1a660bcdea","2012-11-05 21:03:03-05:00","Implemented enable/disable switch for each peripheral controller.

Like the 'Master on/off switch' used in higher versions of Android:
http://developer.android.com/design/patterns/settings.html

In Android 14 and higher, a Switch is used. On older versions, a
ToggleButton is used.
"
"dd62ad84c3a471a4c2f286b91acb0f2b12842eb2","2012-11-05 21:39:51-05:00","Multi-controller support is back.

TODO: Still need to implement a filter for differentiating peripheral
devices.  Jelly Bean provides a new device descriptor just for this
purpose, but unfortunately older versions don't. Will have to implement
something from scratch.  Hopefully not too ugly.  Maybe I'll look in
AOSP for the Jelly Bean source for this.

To elaborate, imagine two players with xbox gamepads. Both gamepads are
mapped the same way.  Problem arises in game.  Each controller controls
both players since the listener isn't differentiating the two gamepads.
The problem doesn't go away if say a PS3 and an Xbox gamepad are used,
because the internal mappings are mostly the same.
"
"3d22b42c7c88284e378e1f552bd683e1b8f97cbe","2012-11-06 09:57:34-05:00","Added menu item to display peripheral hardware info.

Settings->Peripheral controllers->Peripheral info
"
"f782688f2d59be2e7d1b948dd69d1d248eb2bf56","2012-11-06 16:45:23-05:00","Localized toast strings, updated key names, added toast conveniences.
"
"d780583404dbb874dda4a239fc2fadc1190464d4","2012-11-07 15:25:17-05:00","Moved special function mapping inside the regular mapping screen.

TODO: Implement sub-dialog for mapping special functions
"
"727fe0b66a94d3ea70378ebfd9d4d3c26e944c74","2012-11-07 15:27:02-05:00","Fixed some stuff I broke regarding preference/configfile syncing.
"
"3b06e8f1454a5e855855502617240ee9210a7b91","2012-11-07 15:58:37-05:00","Slot-saves & EEP now save to a user-defined directory.

(A subdirectory of their manual save directory )

Other minor things
- Changed some view comparisons to .equals rather than == (not sure
what difference it makes in this case)
- Changed some TODO's, put a * in front of high-priority ones
"
"a4dc6d189e32c6aca1337ee155347593c18c46f1","2012-11-08 10:43:31-05:00","Mempak & rumblepak switches mappable, preparing special func mapping.

Also changed the map serialization format a bit for safer maintenance
in the long run.

TODO:
- Wire the mempak/rumblepak switches to core for actual functionality
- Implement special function mapping (stop, reset, pause, ffwd, etc.)
"
"2a72f528284862937fbb37f00ff22753a732ef4c","2012-11-08 15:02:15-05:00","Reorganized package & class names to clarify architecture
"
"5588f36c9773bccd5982541a2a7208a50cc81f5a","2012-11-08 16:07:11-05:00","Tweaked input architecture: cleaner, safer, and more intuitive

A little more organized, more parallelism between classes, eliminated
code duplication.  Changed name from 'transform' to 'provider' and more
initialization now happens in the constructor rather than relying on
client code choreography.  This was one of the little things bugging me
about the new input architecture.  Smells better now.
"
"dba62687460f7f6904016a91e3cf9cd7ac7e8341","2012-11-08 23:10:06-05:00","Further encapsulation of input listening code.

Created new class, LazyProvider, which
- simplifies InputMapPreference, keeps it coherent
- simplifies implementation of other mapping functions

E.g. LazyProvider will simplify the implementation of special function
mapping.
"
"bc976a02fa175f0c6e1af1c8da8c501e3532029f","2012-11-09 00:31:04-05:00","Gold-plated all the provider classes with Javadoc.

Beta-quality code, very clean and stable.
"
"4a40f30a7b5cb3688e880658cbdcb3f9d7222cc5","2012-11-09 07:53:52-05:00","Fix some chained variable assignments.

Can be less confusing to some people (such as newcomers to the codebase who have a basic understanding of Java).
"
"1e75b4b2423ff0818c4e54d038fbb19bc4e76ab3","2012-11-09 08:24:44-05:00","Fix a javadoc @see tag.
"
"0235659cbb7d9c59ca5f1e170f3977775f390022","2012-11-09 14:05:45-05:00","Completed the javadoc for most map and controller classes.

Changed a bunch of little things like variable and method names to
enhance parallelism in language and code structure between similar
classes.
"
"fc3c2796a171cf9ada441b92bc3f79e20fe0fc46","2012-11-09 15:05:04-05:00","Change a todo comment

I lied. I thought I did, but then I realized half-way through, 'nope, I don't', so I generalized the TODO comment.
"
"bb7fdc84f52b91de835787856ce04cadad400606","2012-11-10 15:14:54+01:00","core: Manually apply git's core.autocrlf=true setting
"
"3d929cdbb044315972c22fc59d6015d316d7e934","2012-11-10 15:21:32+01:00","core: Remove too heavily broken assembler for x86_64
"
"4ae2f382493619b112f5f90cc0ea94a27867c32c","2012-11-10 15:26:10+01:00","core: Sent x86 linkage asm code through preprocessor
"
"8554ba99e6c7ed37b4b8715f838fb622707580f9","2012-11-10 15:41:52+01:00","core: Remove printf -> __android_log_print macro from files without printf
"
"cb17dccc7b04bbb81b1ed71fed5dd500068d3ed6","2012-11-10 15:45:53+01:00","core: Fix crash when config variable type is changed
"
"b93935e833cec6d00178d8fc1643c1751421984f","2012-11-10 15:57:36+01:00","core: Import minizip from zlib 1.2.5
"
"962a31c046723d81c8cdeb855b6dd997e3d76167","2012-11-10 16:06:15+01:00","core: Fix build with enabled screenshot functions
"
"3bc8caa7ea5f97309b43351e966e58f7f16ac991","2012-11-10 16:22:54+01:00","core: Fix file style differences with hg:mupen64plus-core 478:4f9d7a3c4c90
"
"689629ef7e4bdc9b187a9d0dc17037a8c261e79a","2012-11-10 16:28:31+01:00","core: Remove duplicated fpu functionality
"
"33f5cd590bf2dc01e369b7c13c19338c44fe4d06","2012-11-10 16:35:10+01:00","core: Fix symbol visibility in linkage code
"
"8ddac1ad09bcc805605b3240fbf7a2dcb83f9d14","2012-11-10 16:47:43+01:00","Fix double defined symbols for cpu_byte, {d,h,}word on armel
"
"48456ac613bea0b36cc292c2f75ea12e9c257a76","2012-11-10 16:50:25+01:00","core: Fix wrong usage of cpu_byte <-> byte
"
"6bb4cd5083d789434caae4405767ded8e56ce0fb","2012-11-10 17:19:37+01:00","core: Use dummy functions to avoid GL dependencies
"
"e7108e25843f778078781a65d2d1f803c705f444","2012-11-10 17:24:47+01:00","core: Don't store mapped host registers on stack before dynarec call

The dynamic recompiler uses a simple register mapping for currently used
registers to reduce memory access for operations. The content of these
registers have to be saved back to the memory region containing the emulated
register bar before they will be remapped or may get damaged by an unsave
operation.

Emulated operations in the amd64 dynamic recompiler tried to avoid the complex
register free'ing operation before an call to a C function by storing the
content of mapped registers to the stack. This implementation is faulty because

* the return address (top most stack position when the dynamic recompiler
started a recompiled block) may get written during the execution of the C
function. The problem is that the return address is moved to another
position when the registers were stored in the stack and therefore the
content of a saved register gets damaged by this write.
* the called C function may want to access the content of an emulated
register. This is done by reading the content of the emulated register bar
in memory. This read will return an outdated value because the new value is
only stored on the stack.

This problem can be avoided without more complicated checks by not saving the
content on the stack and instead unmapping the registers and saving their
content in the emulated register bar.
"
"8fa5322ca2c00667963275dfe716df88649edf1e","2012-11-10 18:07:10+01:00","Fix build of dynarec under x86_64
"
"5defbe2c02dadd61bfeafa1a1528bfa1f9af7314","2012-11-10 18:18:27+01:00","Make type redefinition in dbg_decoder.h platform specific
"
"f8a2fa22129d43febc26aad73246db1d273d8da1","2012-11-10 18:08:52+01:00","core: Allow to query new_dynarec CPU type
"
"c67bb8e707338d260c0b6721f226b355a2c0b300","2012-11-10 18:14:52+01:00","core: Mark all expected m64p-ae specific hacks
"
"3e113694703acb718d0868f06048fdbc2c556c15","2012-11-10 18:19:23+01:00","core: Remove wrong comment about type redefiniton in dbg_decoder.h
"
"92596d1236b116b9082b812487e754227ba0b39a","2012-11-10 18:33:46+01:00","core: Provide buffer swapping functions as utility function
"
"ab45f889e5d9f287bde4b722e90e7a0407d8ae92","2012-11-10 18:35:49+01:00","core: Keep most of the rom functions local
"
"19f7ce9683d89cac43ea10580c2fcfcdde5fdb79","2012-11-10 18:52:16+01:00","core: Import interpreter and recompiler core from hg:mupen64plus-core 481:6d1b9c228e5d
"
"3bf9ae428e7f4e5c55cf601d3cb9e9a4b9696f25","2012-11-10 20:26:04+01:00","Use default minizip library
"
"cc214a6ddb49a86660e4b6c4f1e4688a52c2afe2","2012-11-10 15:36:40-05:00","Input notifications now include a hardware ID to support multi-control
"
"8da1dc92fc1191e5521dfa8fc592876c7c96c652","2012-11-10 16:37:10-05:00","Added Javadoc to VisibleTouchMap, and polished related code.
"
"fbf7e6e7cb645cd574345db87a552dbfa23c7d81","2012-11-10 18:05:53-05:00","PeripheralController can now use arbitrary number of input providers.

Makes it easy to support new input hardware, just implement an
AbstractProvider and add an instance to the constructor call in
GameImplementation.
"
"363ba2828d28eaf33f6173c051012e4be4a6bc56","2012-11-11 00:53:43+01:00","Fix swap{16,32,64} symbol collision on Android
"
"7ae3a9fee222d44af87aac1f321441dbc0401d10","2012-11-11 01:39:35+01:00","core: Revert Ari64's '15_dirty_registers_fix.patch'

This change caused a regression when Link went through the first portal
(with scene change) in 'The Legend of Zelda - Majora's Mask'. The game
seemed to have stopped and showed no signs of reaction anymore.
"
"8714cfb23a9ddbaa28599831ade23a5f9690be71","2012-11-11 01:55:36+01:00","core: Revert Ari64's '15_dirty_registers_fix.patch'
This change caused a regression when Link went through the first portal
(with scene change) in 'The Legend of Zelda - Majora's Mask'. The game
seemed to have stopped and showed no signs of reaction anymore.
"
"bdec9137e17da58defd4aa8cf4ab9e3d02d77f6b","2012-11-10 23:39:28-05:00","Added dialog for mapping special functions.

Not fully implemented yet, just working on dialog mechanics. New dialog
appears by pressing a button from the N64 controller mapping dialog.
"
"1fdfcedf8060fa73cc098fa7b44b574f5cf980bb","2012-11-11 00:05:36-05:00","Centralize version detection in Globals.java

This is better because the variable names are more informative than a repeated Build...SDK_INT <= VERSION_CODE compare being repeated. (also saves people from having to actually type those out).
"
"0b8d2663698c5404856dc719eb80bb433a72e632","2012-11-11 04:20:04-06:00","Hooked up requirements for x86

Pulled some code from SDL 2.0 to make spinlock compile for x86.  Also set up the build files for possible future MIPS implementation.  This would require a MIPS dynarec (possible to port the one from Daedalus?), as well as a MIPS spinlock implementation for SDL.
"
"10eab333a9f67d74a59f6ebc0ac6f886fce8e2ae","2012-11-11 13:01:08+01:00","core: Readd clear_cache workaround for Android
"
"ba670597964b0012375032064b251def00b1f963","2012-11-11 17:02:51+01:00","Enable __clear_cache workaround for Android
"
"73363dcb5da8f9c4331eb23b825333e2594aebf4","2012-11-11 11:07:15-05:00","Merge remote-tracking branch 'remotes/origin/master' into concept_menu_prefs_inputs
"
"118ffe782d159a39efc2263b3b8968310516400b","2012-11-11 17:18:36+01:00","rsp-hle: Manually apply git's core.autocrlf=true setting
"
"231a9dc4d4f27b59a12407895db42c4add145e42","2012-11-11 17:24:45+01:00","rsp-hle: Import from hg:mupen64plus-rsp-hle 85:1e306f08d231
"
"bf0a295763be5bdfbdbac5e4ee94385421eea266","2012-11-11 11:45:15-05:00","Renamed some global constants, reconnected game loading, added javadoc.
"
"052ecbf2f16e04d493fe5528b951d76274327734","2012-11-11 21:41:58-05:00","Fixed force close for older Android versions.
"
"58f76771ba9c8f9c12c8e7923385f982724060f8","2012-11-11 21:46:05-05:00","Removed some global var dependencies.
"
"231d667f865872edaf87e9bee10db57f081eaf99","2012-11-11 22:22:42-05:00","Split GameImplementation into GameLifecycleHandler and GameMenuHandler.

Keeps things uncluttered and coherent. Makes it easier to follow the
nested life cycle loops:

(start)
|
onCreate <--- (killed) <-----\
|                         |
onStart <--- onRestart <--\  |
|                      |  |
onResume <----\           |  |
|          |           |  |
(running)     |           |  |
|          |           |  |
onPause ------/           |  |
|                      |  |
onStop -------------------/--/
|
onDestroy
|
(end)
"
"e19f1138b60f6bff6e42e4c1273b8a78cce9ef3b","2012-11-12 10:52:10+01:00","Avoid out of bounds access of audio ABI callback array
"
"710826922abc7820d208c5f1ef0867d844d6812d","2012-11-12 12:33:34+01:00","Avoid further EOL problems by specifying binary/text type
"
"e866147389e62bcdb3074de662f3e80d03dafca7","2012-11-12 12:39:18-05:00","Add javadoc about the FileUtil class.

Only provides the main class javadoc so far.
"
"83755891b8d3fb480e6998bfaeb397ae31cb3631","2012-11-12 19:39:09+01:00","audio-sdl: Manually apply git's core.autocrlf=true setting
"
"51e5a54fa01eb9c26dca5e8eb3f5a1bf226b14f7","2012-11-12 14:07:08-05:00","Get rid of a possible null dereference.

Before, if mConfigMap was null, it would have had a NullReferenceException before it actually reached the null check.

because of the variable declaration and assignment:

Set<String> keys = mConfigMap.keySet();
"
"38b687d04a77fe6826ff88aa6458475f310721c9","2012-11-12 20:40:16+01:00","audio-sdl: Avoid using the currently broken SDL_MixAudio

SDL_MixAudio in the currently shipped version of mupen64plus-ae creates
reverbs and echo. Usually the Android sound control is used and not a
mupen64plus-ae specific functionality. Therefore, we can remove this
functionality and check the problem in SDL later.
"
"43ec77aa886d54dc6758a65eeff7faf8ae89d840","2012-11-12 18:47:12+01:00","audio-sdl: Refactor OSS support

From the changelog:
- Bugfix: Don't assume OSS is installed in all linux systems.
- Bugfix: Some combinations of VolumeSetLevel and VolumeMute caused VolumeGetString to return Mute when not muted
- Make SDL volume handling the default, since OSS is no longer included in the kernel.
- Minor refactoring of volume handling code.

Import from hg:mupen64plus-audio-sdl 79:761b386e52de
"
"80d753e8f3c71717feaf33cc72ee4fe5736213b9","2012-11-12 18:51:39+01:00","audio-sdl: Allow to change resampler quality

Import from hg:mupen64plus-audio-sdl 80:ded77c5fbb53
"
"7075cdd21764fabd5cc82cf21c5ad725ac4369dc","2012-11-12 19:00:42+01:00","audio-sdl: Add support for speexdsp resampler

Import from hg:mupen64plus-audio-sdl 82:d483528be393
"
"dce1d74ed5719fd713c4545e114970ffcd2a596d","2012-11-12 18:00:20-07:00","Detect OpenBSD PowerPC platforms macppc and socppc.
"
"d6c1dafc1482e3377cdca5a77ddc2eaf12a8dfe0","2012-11-12 18:01:33-07:00","Detect OpenBSD PowerPC platforms macppc and socppc.
"
"26417f42427890da5fb9b6517159682940a520f8","2012-11-12 18:02:40-07:00","Detect OpenBSD PowerPC platforms macppc and socppc.
"
"3a7a5b435a21ffaf18d07b0bdeb129f356cae7f1","2012-11-12 18:03:16-07:00","Detect OpenBSD PowerPC platforms macppc and socppc.
"
"79e0f12a6a4daf8f077a21c89070aaa339a41c64","2012-11-12 18:03:52-07:00","Detect OpenBSD PowerPC platforms macppc and socppc.
"
"98dc5cf7b8f5dae08087ccae50a35c3cb9862c96","2012-11-12 18:04:28-07:00","Detect OpenBSD PowerPC platforms macppc and socppc.
"
"71ad85d3fcabd20922f03bb21cabce7ee124b891","2012-11-12 21:33:36-08:00","merge with no changes
"
"679e64f6c6e96c984907e478a18b068f0f19d502","2012-11-13 10:46:04-05:00","Big commit (sorry!)

Took a long meandering path to get here, with several dead ends and a
lot of temporary logging/debugging.  So I think squashing it all is the
lesser of two evils in this case.

Changelog:
- Filename/package reorganization
- TouchscreenView => GameOverlay
- SDLSurface      => GameSurface
- InputMapPreference moved to .persistent sub-package
- PathPreference moved to .persistent sub-package
- game_activity.xml, preferences.xml, strings.xml updated as needed
- Refactored the interaction between core, surface, and activity
- GameSurface holds the thread running the core (as always) since
the core is tied to the surface lifecycle, not activity lifecycle
- GameSurface notifies listeners after core is fully initialized and
before the core is about to shut down.
- GameLifecycleHandler listens to these notifications
- On core startup: sets a flag, loads auto-save file, and resumes
- On core shutdown: clears flag
- GameLifecycleHandler tests flag before all calls to change emu
state (only calls onPause, onResume if core is running), which
eliminates some crashes and stalls.
- The flag is key to resolving the surface, core, and activity life-
cycles, which are not nested or in lock-step.
- GameActivity*
- Added more lifecycle methods (many just for debug logging)
- Simplified activity start/finish semantics, follows more traditional
Android activity lifecycle
- Removed the CLEAR_TOP and SINGLE_TOP flags, unnecessary for us
- MainActivity is finished because we never want to return to it
- MenuActivity is not finished, because we want to return to it
- GameActivity is finished, because it's the simplest way to manage
its lifecycle and synchronization with user prefs changes
- Presently, there is a bug related to core shutdown that causes a
force close when returning to MenuActivity.  This is a bug related
to the core, not Activity lifecycle semantics.  Verified through
extensive debugging (not committed).
- Organized the implementation of GameMenuHandler for more parallelism
- Simplified manifest
- Removed android:configChanges annotations (officially discouraged,
not sure why they're needed (but please enlighten me))
- Shorthand notation for android:name annotations
- Layout resources
- Changed all fill_parent to match_parent (they're equivalent but
fill_parent is deprecated as of API 8)
- Tweaked status text padding in MainActivity
- Removed full-screen from MainActivity (transition to MenuActivity
seemed jumpy, obtrusive as the status bar popped back into view)
- Global cleanups
- Removed Paths.tmpFile (made local to CoreInterface.getRomPath)
- Removed INHIBIT_SUSPEND setting. Suspend is always inhibited now.
If there's a reason to change back, we can do it later.
- Generalized, renamed some stuff in Paths.java

TODO:
- Fix fatal error after NativeMethods.quit is called, which causes
force close
- Remove auto-save/resume preference (must not be disabled for proper
pause/resume lifecycle management)
- Add reset button to ingame menu, to replace the functionality lost
by the previous TODO (this may be more intuitive anyhow)
- Remove layer of indirection between touchscreen controller, visible
touch map, and game overlay (make overlay listen to controller
directly, rather than going through visible touchmap)
- Consolidate and cleanup CoreInterface, NativeMethods, and lifecycle
handler (have become disorganized since refactoring)
"
"2af9543d01d8074c69ef9b286ffa5f1086b152ef","2012-11-13 11:03:41-05:00","Reconnected save/load from slot/file in game menu.
"
"7929e14a6cab454822d3c6a2ee8e48cf09967aed","2012-11-13 11:23:26-05:00","- Fix a bug relating to UserPrefs.java

- Use .clear() instead of removeAll() for two collections. removeAll is O(n^2), clear is O(n), this really doesn't matter in this case, but in the end, it's still less code to write

Make CountingInputStream static.
"
"44ca55288acce9d0f3ccece78af93cfce719ff0d","2012-11-13 11:38:31-05:00","Remove an unnecessary null check.

strLine is assigned fullStr.trim()

Thus strLine cannot be null, since fullStr is not null.
"
"d7990c2e855c80836bc6baf3989512fd89f06c41","2012-11-13 12:11:33-05:00","Restructured TouchscreenController->GameOverlay listening

Fixes a todo from earlier commit.
Previously, GameOverlay listened to VisibleTouchMap, which listened to
TouchscreenController. Now GameOverlay listens directly to Touchscreen-
Controller, which leads to a simpler implementation and a more more
logical organization of functionality.
"
"f6839abff7d893d5422ce38cf5a27b109ca56e48","2012-11-12 10:52:10+01:00","rsp-hle: Avoid out of bounds access of audio ABI callback array

Import from hg:mupen64plus-rsp-hle 87:4c9e834e91d8
"
"aa12eaa1cc8e7c210ed4d93e142cec68f420e527","2012-11-13 19:33:44+01:00","front-end: Manually apply git's core.autocrlf=true setting
"
"067918529b17e9c96063fb24b2745e95ca3b4c6d","2012-11-13 19:47:57+01:00","front-end: Import from core from hg:mupen64plus-ui-console 115:282037c37c82
"
"9ee8e0921bac0222898ee0de6cb2eaeacd44cf40","2012-04-08 18:55:50-07:00","front-end: more specific parameter comment based on feedback from issue 489

Import from hg:mupen64plus-ui-console 116:7223ec69717f
"
"cdf11323b94f04abdc7bab9f28524dc7f779882b","2012-11-13 20:23:53+01:00","front-end: Use DebugMessage instead of printf

Import from hg:mupen64plus-ui-console 118:36e0eafab8a6
"
"132e10d6d4dbb74f9b599fe6ec912481c718f696","2012-11-13 21:17:03+01:00","gles2n64: Manually apply git's core.autocrlf=true setting
"
"27e109ff998ada408af151790fafdec59ed835a0","2012-11-13 22:10:47+01:00","gles2n64: Avoid hang on frameskip by generating SP/DP interrupt
"
"7ad523ffa55e5c12edd891ac9d3ec26d6c680bce","2012-11-13 18:08:13-05:00","Restructured settings menu, strings

Xperia PLAY settings hidden altogether if not a PLAY (this is currently
a very conservative test, so it won't always be hidden until we know
the PLAY's hardware strings.

All plugin choices under Advanced submenu, so that they're all in one
place, out of the way. With the exception perhaps of video plugin,
they really do seem to be advanced options for special cases.

Removed 'reset app data' menu item.  With custom game save locations,
the safe backup procedure it provided may no longer be needed, may
confuse users, and might be a nuisance to maintain.  Reset app data
can still be done through the OS as a clean reinstall, which may be
more intuitive anyhow.

Updated some key names to in be consistent with the evolution.

Disabled plugins now load using the 'dummy' argument. I think I still
did something wrong, however, so if you disable things, you might get a
crash.
"
"47d003c9e5b97c7b7711693130ba95d7d8aec1e4","2012-11-13 18:10:05-05:00","Game now pauses/resumes when saving/loading to file.
"
"3a795da312560a2d2a21fe0d24efae91cde60091","2012-11-14 11:54:33-05:00","Generalized controller management, tweaked some names for parallelism.

GameLifecycleHandler just deals with AbstractControllers now.
AbstractProvider listener name changed to OnInputListener to be more
informative and to parallel other Android naming conventions.
"
"5c1f5886a448795897f8628c1bd74312fea2f9ef","2012-11-14 11:57:22-05:00","Created UML diagrams for input architecture, GameActivity associations.

In ./doc/
"
"678baadec18a5bba77c0de6c6c4f4c9df548a633","2012-11-14 12:25:43-05:00","Tweak UML diagram
"
"651fe586186b54a05bcd34c4005741ef122f1ae0","2012-11-14 15:32:09-05:00","Dummy plug-ins working properly now.

I had been doing it wrong all this time.  Now it works properly.
"
"77a17cc68f00e88719d5ab21c9ed8860eee3959f","2012-11-14 20:59:44-07:00","Add newlines to ends of files.

Fixes compiler warnings on OpenBSD.
"
"f9ad621686ac32839149f171a1c86b1ba1902ff9","2012-11-14 21:42:12-07:00","Allow manually disabling OSS.

The previous check is inadequate, because OpenBSD has /dev/mixer but does
not use OSS.
"
"6a66e74fb2226585db39c68441b10ec655064cc6","2012-11-15 09:34:45-05:00","Updated Xperia Play related stuff (see below).

Xperia Play-related changes:
- Xperia Play is now strongly tested (hardware = 'zeus')
- Xperia Play preferences completely hidden for non-Play devices
- Xperia Play menu moved to top of settings screen so that it stands
out for Play owners, also likely to be the most important input
device for them.
- Restructured the Xperia Play pref screen to parallel the other input
config screens (very similar to touchscreen prefs structure).
- Expanded the hardware identification process to provide more info

Other changes:
- Fixed null exception if touchscreen controller & fps indicator disabled
- Removed peripheralEnabled preference (peripherals can already be
disabled individually, and the input plug-in can also be disabled)
- Menu options are disabled when related video/input plug-ins disabled
- Updated Globals.java with more big-picture TODOs
"
"8e752f40e9ce81b7a5b80a049cebec3c441cce57","2012-11-15 09:37:49-05:00","Fixed an API-related bug in Utility.getPeripheralInfo
"
"d857af4a75d4270deae29fce0be025e77366c80d","2012-11-15 10:52:49-05:00","Fixed a slew of API & device compatibility issues.

Eclipse context menu->Android Tools->Run Lint: Check for Common Errors
This does a much more thorough check than the automatic one at build.

Issues fixed:
- Avoid default locale in toLowerCase, toUpperCase
- Explicitly mark non-translatable strings and arrays
- Remove some unused strings
- Remove some strings defined only in japanese translation
- Move bitmaps to drawable-mdpi, but keep xml shapes in drawable
- Move hi-res bitmaps to drawable-nodpi
- Define non-Holo theme for pre-Honeycomb devices (was causing blurry
text in pre-honeycomb dialog lists)
- Remove missing onClick callback declaration in widget_toggle

Also sorted some of the strings by key and by their order in menus.
"
"953b2a3fe4a697a66c32991c0d7ffb8a10dc4de6","2012-11-15 12:07:07-05:00","Fixed API-related issues and a nasty little bug in AbstractProvider

Bug introduced in 5588f36c9773bccd5982541a2a7208a50cc81f5a:
isHoneyComb_MR1 conditional got flipped
"
"ac8e27c303b511f10e75b3e7c936cd3ac9cb113e","2012-11-15 12:52:46-05:00","Eliminated some nuisance logcat chatter in AxisProvider.java
"
"94e70e641740730387f4dda1bde84308fa53734a","2012-11-15 13:23:19-05:00","Fixed FC bug for non-Xperia Plays.
"
"9c89c8cf95afcfe87960cb3b109d4ca6e41250f1","2012-11-15 13:59:20-05:00","Fix two javadoc tags (changed from </p> to <br/>
"
"86c4e48cc7a4068db3a7ab3e6f95ac052ef85269","2012-11-15 19:13:12-08:00","fix a bunch of incorrect documentation related to the header files
"
"2d0d0fa04b96b60e580428a81e3821c8be342524","2012-11-16 16:32:31-05:00","Preference to disable joystick redraw, for speed on slow devices.

TODO: Re-merge the methods for slow update rate, from master branch.
"
"618013eca7b3ae9e2a635464e91dd17a883e1a91","2012-11-16 16:47:57-05:00","Xperia PLAY almost working again (video OK, input broken).

Restructured GameLifecycleHandler, GameActivity, GameActivityXperiaPlay
a little bit so that methods get called in the proper order for the XP.
Also moved just about everything into the common GameLifecycleHandler,
so GameActivity and GameActivityXperiaPlay are very small, nearly
identical implementations.

Moved some of the native callbacks back into GameActivityXperiaPlay,
like in the master branch.  At least for now until XP is functional
again.  For encapsulation would be nice to eventually put that into
XperiaPlayController.

Force close occurs in XperiaPLAY mode as soon as an input arrives, e.g.
touchpad, touchscreen, hardware buttons.  That's next on my todo list.
"
"ae1004e85c8b110390c5a6d540b559aec1c59ae6","2012-11-16 17:21:18-05:00","Change a comparison of objects to use .equals instead of ==
"
"9198fdfd3f1e62e50c855789042d805d50277444","2012-11-16 17:34:08-05:00","Remove redundant null checks in situation in that which the variable being checked cannot possibly be null.

Yay for un-nesting some things.
"
"b8d42c238b615280303fda335ab2a0f4370d1ace","2012-11-17 10:32:02-05:00","Fixed bug in path preference, rearranged some code for readability.

Bug occurred when the persisted path no longer existed (e.g. user moved
the savegame or ROM folder). In that case, the dialog box would not
contain anything, not even the '..' for the parent directory.
"
"f8ec6037f4d46c8f9f6c9a3fecb4e36a87155486","2012-11-17 11:48:38-05:00","Added preference for variable FPS refresh rate, fixed bug in UserPrefs

Bug involved converting ListPreference values to strings, improper call
to Integer.parseInt.
"
"75389a33881cc83be87039a9fcd0dcbdd7b64fd4","2012-11-17 12:51:40-05:00","Added preference to adjust TouchScreen redraw rate.

Never, Occasionally, and Frequently
"
"b03ee9c103aac6664919a76241a862740ab957aa","2012-11-17 13:13:12-05:00","Remove unused import.

Also 'fixed' copyFile in the FileUtil class. It should return false if the source is null.
"
"8c827c81fd40d39a1a608cc6293947ea05ab7b99","2012-11-17 13:23:46-05:00","Cleanup copyFile some more. Realized that two of the try blocks can be combined. This also allows a direct assignment with 'in' and 'out' streams.
"
"8f42ff02c9110158b9d1f8219732b9a8efae8795","2012-11-17 14:09:50-05:00","Bugfix: null check
"
"2fec778ccf8409578a53c7493e476bd9a2c933b9","2012-11-17 14:16:40-05:00","Small bugfix and minor cleanup.

Bug: Preference change wasn't being persisted.
Removed Log in AppData because info already available in prefs menu.
"
"7a62726bbb0d2472c79c9ca1950dae50cda54e77","2012-11-17 14:56:45-05:00","Merge branch 'master' into concept_menu_prefs_inputs

Conflicts:
jni/front-end/src/main.c
(changed names of the Java functions that call into the JNI code)
"
"7adeeeb64d9ecb3031026ecd8a2ae46283d8f4ac","2012-11-17 15:33:52-05:00","Bugfix: app theme xml syntax; removed some obsolete logging.
"
"9b7778916889d639a10c3233f61a5b04c2c46a56","2012-11-17 16:42:54-05:00","Update the Japanese translation.
"
"8dcb5daafc06d0accbbf4ca7a6ef316aa23b3773","2012-11-17 22:03:04-05:00","A little more tweaking to mapping layout
"
"f4cb8e41b00487c622260a25056b5f426dca4d28","2012-11-19 12:09:35-05:00","Tweak InputMapPreference for smaller screens.
"
"892eba0adf96dbee91d529640f603b6d1985edf8","2012-11-20 10:57:35+01:00","SDL: Manually apply git's core.autocrlf=true setting
"
"de850e9180611d0c70a311dbbb4706af5af47f6e","2012-11-20 11:00:26+01:00","Store normalized version of win32 osal files
"
"0b78d8694fe08d4840db666e936347364585c0fd","2012-11-20 11:01:06+01:00","gles2rice: Manually apply git's core.autocrlf=true setting
"
"a147cd3d99376c677390294bea2467ba0a3d68b2","2012-11-20 11:01:33+01:00","input-sdl: Manually apply git's core.autocrlf=true setting
"
"086323a05c6774baaedeab211bb5562db62e7881","2012-11-20 11:02:00+01:00","png: Manually apply git's core.autocrlf=true setting
"
"2fe45ccf6ed5b1b447f2acb8eee2524e3a17e976","2012-11-20 12:20:00+01:00","frontend: Manually apply git's core.autocrlf=true setting
"
"8930530b4051af5e7c91e7b12124ee45dad057bb","2012-11-20 12:20:24+01:00","xperia-touchpad: Manually apply git's core.autocrlf=true setting
"
"6cc36c6a21da8d4e931542330bc89371f2b340f5","2012-11-20 12:20:55+01:00","Manually apply git's core.autocrlf=true setting for remaining *,mk
"
"ad4006a6dc0b73660c6a3cb626bca13a0b66f680","2012-11-20 10:30:41-05:00","Tweaked button map layout some more.

This implementation is pretty ugly.  Someone with better XML layout
design skills should try to do this in a cleaner way.
"
"ce7ba9db90f2a0a131a5cce8029a4d1f16230b99","2012-11-20 11:30:26-05:00","Misc changes.

Made finishedreading protected. At least it isn't a global anymore.

Added a todo to the NativeMethods class.

Fixed a logging message.
"
"3cb86e188af420dbac2c33e6781178a384225a18","2012-11-20 12:54:20-05:00","Removed special function mapping from InputMapPreference.

I think putting it in a separate menu (like 1.9.2) will be more natural
and will make the implementation easier to read and maintain.
"
"34be907537764a63dbc8e5487f9203a062c3ea09","2012-11-20 19:18:44+01:00","Merge branch 'master' into concept_menu_prefs_inputs
"
"53d89db50866716da62b32f6c295e77ab77f77e5","2012-11-20 19:31:41+01:00","Don't use expressions with side effects in assert(..)
Expressions which have side effects should not be part of an assert. This
includes function calls to non-pure functions or store operations. Otherwise
the execution of the code depends on whether the code is compiled with NDEBUG
or not even when the assertion would never be false.
"
"4629d5eacb1c8a0c496af1d0824153a7bd66b166","2012-11-20 19:32:18+01:00","Replace printf with DebugMessage in new_dynarec
"
"bc3b199b04457684b6ddb394f4fba051ee192b1f","2012-11-21 13:43:41-05:00","Added preference for changing screen orientation.

Based on Gillou68310's implementation in master branch.
"
"d029afba931df89be4e2a7a6b6b2af205db978ce","2012-11-21 14:16:22-05:00","Update the Japanese strings for the screen orientation additions.
"
"47bac82b8968fc7e92ce20e7e031a2de330a96a6","2012-11-22 09:55:07+01:00","Completely disable old dynarec when NEW_DYNAREC is enabled
"
"f9b011fbf1bd9e29ac9482a7795b1c947302adfa","2012-11-22 11:07:31+01:00","Embed list pointers directly into data object
"
"d9e579f3850185ca30041d99e63d75d58d8914b5","2012-11-22 11:07:37+01:00","Add workqueue to postpone work to another thread
"
"e0824ce9f9f77dedf5b212f3cbcd73a8db27aa56","2012-11-22 11:07:39+01:00","Protect OSD list access using mutex
"
"0491e92f4a4d485547abf00e55dad0a1896d5a5b","2012-11-22 11:07:41+01:00","Reduce pause when saving to native mupen64plus savestates
"
"63df1240ea54da410e5346625bee1f46802c3cf7","2012-11-22 13:50:10-05:00","Fixed GameActivityXperiaPlay crash.
"
"669884e077c1e4dbdf50914aadfc6026aceec7b8","2012-11-22 17:01:17-05:00","Formatted code (no other changes).
"
"6edb977396a440301c841229b098fb236d86eeb3","2012-11-22 18:35:44-05:00","Encapsulated Xperia PLAY input handling in an AbstractProvider

To match the pattern used for keyboard, mice, gamepads, etc.
"
"a0261d72e38980bbcf7bee24ebfc59a2a9925a73","2012-11-23 09:37:34-05:00","Added the capability to swap the audio channels, or change the audio resampling algorithm to use from the preference menu.
"
"de29a78fb163620f9a09e41faf983ec9f0c6ebd5","2012-11-23 11:55:22-05:00","Resampling algs *should* work now.

Also modified the gitignore to ignore generated stuff from the Intelli J IDE.
"
"1bde7719157444aea16e89d0a77d661deb75a757","2012-11-21 11:03:24-05:00","Updated Eclipse project settings

These settings are used by the Sony-Ericcson Xperia PLAY demos.  I'm
not sure if they change anything about the build, but they do get rid
of some spurious lint errors in the C code for me.

Let me know if these new settings cause problems.
"
"5b9eed78c6e200520c726fbd5dd92efb4a87b78a","2012-11-25 17:21:34-05:00","Removed obsolete variables from xperia-touchpad native library.
"
"ddd1a74d7b7d1ac1bf05dfd885744622917a7d85","2012-11-25 17:23:33-05:00","Simplified GameActivityXperiaPlay to match GameActivity

GameLifecycleHandler directly handles the differences between the two
activities.
"
"4ec42977f0d1be7e9d3d3eb6f62feaceae7f463f","2012-11-25 17:40:42-05:00","Renamed TouchscreenController -> TouchController for generality

Since it can also be used for touchpads.
"
"c5c88d984ccf76961621084f30a40ba32089756c","2012-11-25 21:17:37-05:00","Added source filtering to TouchController, to discriminate sources.

This will be useful for discriminating, e.g. Xperia Play touchpad from
touchscreen.
"
"47bef96a3355e519c3de42f30b5255e33c7f9a5f","2012-11-26 20:04:30-05:00","Revert 'Updated Eclipse project settings'

This reverts commit 1bde7719157444aea16e89d0a77d661deb75a757.
"
"b21d2b27738ed317a092051a2561c17e35181d73","2012-11-26 20:15:10-05:00","Fixed Xperia PLAY touchpad layout loading.
"
"7af14caa98d034a752ca848e962beba4c304cbbe","2012-11-26 20:47:08-05:00","Major revision to native touchpad <-> java interface

Xperia PLAY re-integration almost complete.

For touch events, rather than calling touchscreenBegin, touchscreenUp,
etc., the native code now calls into java through a single method,
onNativeTouch.  The java code then reconstructs a MotionEvent object
and passes it on to OnTouchEvent listeners, just like a View would. We
encapsulate all this in a new java class, NativeInputSource, which
derives from android.view.View.  This simplifies the implementation of
TouchControllers, since they already are designed to listen to a View
for touch event data.  I.e. a TouchController can either listen to a
GameSurface or a NativeInputSource for touch events.  The former is
used for normal Activity, while the latter is used for NativeActivity.

TODO: Touching buttons and pad simultaneously does not produce desired
behavior.  (I already know how to solve it, just have to do it.)
"
"6f3d322a75e58bf5731f92e83f3519c5ebb97d23","2012-11-26 20:54:40-05:00","Removed obsolete java class.
"
"07aaadf9ea6b545bf4ed790b6ade7f23fb845f20","2012-11-27 09:03:27-05:00","Fix up some javadoc.

Simplify some sections of DataDownloader. Replaced some explicit iterators with foreach loops.
"
"b80b397abc4c0df16a8bd0ef8efca45c6c20bb4f","2012-11-27 09:37:36-05:00","Created demux class for sending input events to multiple listeners.

Also fixed bug where menu keys were not handled properly when input
plugin was disabled.
"
"ba9710b27886e233b915af9131b289a9d8a6ac62","2012-11-27 09:48:47-05:00","Remove a now unnecessary method.

This is handled in MenuActivity.
"
"6d1a1aaf78ea21c72864328559489487737a8777","2012-11-27 09:51:22-05:00","Merge branch 'concept_menu_prefs_inputs' of https://github.com/paulscode/mupen64plus-ae into concept_menu_prefs_inputs
"
"4381bd92521db22b1fc44787e90fca76ca221ff6","2012-11-27 09:57:53-05:00","Revised controller state handling; Xperia PLAY fully integrated

AbstractController changes:
- If multiple controllers pertain to the same player, they all share a
single control-state object
- e.g. Xperia PLAY touchpad, touchscreen, and keypads all share and
update a common representation of controller state
- Eliminates problems, e.g. touchpad analog stick motions were inad-
vertently overwriting keypad button states, e.g. preventing jump
while running in Super Mario.

Along with the previous commit, this fixes all remaining Xperia PLAY
issues.
"
"6ff8af2544685b9060eeea43de32b2d1e4e3eed8","2012-11-27 10:33:02-05:00","Fixed bug in alternate xperia play touchpad layout

c-pad was not located correctly in
skins/touchpads/Mupen64Plus-AE-Analog-Right/pad.ini
"
"8cc4414e2647bb006e5cba2e32d4c10ed1d81e13","2012-11-27 11:00:09-05:00","Fixed splash screen text layout.

I must have broken this earlier and didn't realize it.
"
"df36be5f321bc41c218788cc7ab8d88da8d6039f","2012-11-27 11:04:42-05:00","Auto-saves stored in user-specified directory.

Auto-saves are no longer lost if the user deletes the Mupen assets or
does a clean reinstall.  AutoSaves are stored in a subdirectory of the
user-specified game-save directory (like slot saves and manual saves).

Also changed the name of the auto-save file to be the name of the ROM,
rather than hash code.  That way, if the user moves the ROM folder, the
linkage to the auto-savefile isn't lost.
"
"1402fe98844bc914b5b84b95880632880afe5303","2012-11-27 11:52:47-05:00","Bugfix, input mapping screen
"
"53117aae1080ae73f221a60a6a1f2e39b86d9317","2012-11-27 12:05:36-05:00","Revised menu, strings, much more intuitive IMO

Lioncash - I converted some of the Japanese strings to English to high-
light what needs to be re-translated.

Change summary:
- Renamed 'touchscreen' settings to 'touch' settings
- Moved Xperia PLAY touchpad settings into 'touch' menu
- Renamed 'controller' settings to 'input' settings
- Revised summary text for more parallelism

It must be intuitive to users that buttons and joysticks are mapped in
the 'input' section, regardless of whether the buttons are physically
attached to the phone/tablet or are part of a peripheral gamepad/key-
board. Consolidating touchpad and touchscreen controls is also more
intuitive IMO since they behave nearly identically, and some settings,
like octagonal constraints, apply to both. The main driving force is
that it should be obvious to Xperia PLAY users where buttons get mapped
and where touchpad is configured.

The default setting for touchpad is 'enabled' so that xperia play users
get out-of-box goodness. Non XPlay devices already have this preference
disabled programmatically, so this isn't a problem for them.
"
"0e42298c194a320a0b7fdf9ed14dce7536ff354e","2012-11-27 12:12:40-05:00","Fix typos
"
"fa9402c14d0e79e8840a979ba26afcdcd8bd1a67","2012-11-27 12:15:58-05:00","Update Japanese translation to reflect string changes.
"
"20d44128bc51a8ec4565a933739a5db413db6356","2012-11-27 17:10:01-05:00","Removed obsolete resource and removed icons from plugin prefs.

The icons in front of the plugins looked a bit weird IMO since they
weren't present on all items in the menu. Plus they duplicated the
icons from the parent menu, which can be disorienting from a usability
standpoint.
"
"0677fd1cfeb606b1912c1509de76e55b7ecc8187","2012-11-27 17:10:16-05:00","Updated UML documentation.
"
"a1558e91997c9124bdc0738ea7032f79ad7cbf84","2012-11-28 22:02:50-05:00","More tweaks to button map screen, more consistency.
"
"73ecbbd91414e07c443c70b5f59b2059ab1a9dac","2012-11-29 21:56:59-05:00","Bugfix in Demultiplexer.java.
"
"2b7a2a2299a8b1b2e741ad1c875565cbf6e15d2f","2012-11-29 22:11:00-05:00","Added infrastructure, to filter inputs based on peripheral ID.

This is half the solution for good multi-player controls.  The other
half is to create a GUI that allows users to map a peripheral device to
a player number.  In Jelly Bean, we can permanently store this ID since
it is persistent across reboots.  For previous APIs users will need to
remap device to player every session.

This implementation does not apply to pre-Gingerbread devices, since
older APIs don't provide any sort of input identifier (as far as I can
tell in the little time I spent researching it).
"
"64e96fcd44fa96d2b782d28dfe9a685e80f70699","2012-11-30 11:20:34-05:00","Substituted utility function for sleep calls.

Readability, maintainability.
"
"dea87ebdd2a2762eec1b5a31ea93c39451b77541","2012-11-30 11:22:33-05:00","Bugfix: Toast display at core startup.

The message needed to come from the MenuActivity, not the GameActivity.
"
"58947f2b88ef695cffe7562f4d33de51943666e5","2012-11-30 11:38:13-05:00","Updated toast messages to match conventional Android grammar.

I noticed a lot of google's apps use these patterns:

- Something is happening in background:
'Downloading file…' <-- using present progressive tense and ellipses…

- Something just happened:
'File downloaded.' <-- used past tense and period.
"
"b7dd071ef167c68c77b66caf4e267bd0f86ed017","2012-11-15 04:59:44-07:00","core: Add newlines to ends of files.

Fixes compiler warnings on OpenBSD.

Import from hg:mupen64plus-core 488:a943e14d356b
"
"7bc61852affff2cc749df6bd7f7c1ee6ce31331c","2012-11-20 19:37:33+01:00","core: Don't use expressions with side effects in assert(..)

Expressions which have side effects should not be part of an assert. This
includes function calls to non-pure functions or store operations. Otherwise
the execution of the code depends on whether the code is compiled with NDEBUG
or not even when the assertion would never be false.

Import from hg:mupen64plus-core 488:31c032c952d2
"
"6d1edddc417fa3689f512d3773cf77d3662ddca1","2012-11-20 19:43:00+01:00","core: Replace printf with DebugMessage in new_dynarec

Import from hg:mupen64plus-core 489:0fb8f3916139
"
"80935abcdc2ee43468f7bcbac35e661ba7868d5c","2012-12-01 17:08:03+01:00","Merge branch 'master' into concept_menu_prefs_inputs
"
"26df4703284f6c6b200402db00fc5626ba2a0188","2012-12-01 21:57:21+01:00","frontend: Mark functions overriding superclass functions as @Override
"
"e57811b54d5de87aaaec0c76732a8c3589be4ee3","2012-11-21 17:49:46+01:00","Fix Flickery Shadows on Galaxy S3
"
"eab8cc544616dbeb9747ca09f717fc6d5a166e92","2012-12-01 22:02:03+01:00","frontend: Remove unnecessary casts
"
"a947d06d2e1e25a77c0eb932f1dbdf313bc8038c","2012-12-02 10:02:13+01:00","frontend: Mark all overriden interface functions

We should use a consistent Java 6 style of marking all implementations
of abstract interfaces as '@Override'. This is a problem for Java 5
and earlier because it cannot be used there for for anything else
but overridden functions of a superclass. Therefore the project specific
settings for the compiler in eclipse
('org.eclipse.jdt.core.compiler.source') has to be set to '1.6'
"
"4c9b560d91ff7d7f80530075eec88f1c1ad4661a","2012-12-02 21:28:11-05:00","Added eclipse configfile for proper android build settings.

Related to Sven's previous commits, this ensures that the project is
built against java 1.6 (not 1.5, not 1.7).
"
"91cd746a4234232057b62df2a0fe77c64b8b1a9b","2012-12-02 21:49:01-05:00","Bugfix: xperia play touchscreen/touchpad inputs

If an xperia play user enabled touchpad, disabled touchscreen, the
the touchscreen wasn't fully disabled.  It effectively became a second
touchpad, using the the real touchpad's map.  A benign bug, but a bug
nonetheless.
"
"402ba8350f25c02a6d4e054a69a720817ea42330","2012-12-03 10:39:26+01:00","Fix build on x86 with SSE inline assembler
"
"a4bcd1b042dd79909e615ec04210378c5904a6ee","2012-12-03 09:06:55-05:00","Added front-end for in-game reset, stubbed back-end for someone else.
"
"f9f32762f6a64e1b396223385cf82e96f7996977","2012-12-03 09:11:43-05:00","Tweaked in-game menu arrangement

For some reason I was always hitting load slot when I meant to hit
save slot... I think it had to do with the order of the buttons on
screen, not sure why.  Let me know if you feel differently.
"
"ff2879c53e30ad5515d7ec5a462aded91c683e7d","2012-12-03 09:48:16-05:00","Bugfix: FC when phone slider opens/closes in game.
"
"9f6ba2afdf73cf3a906787f2a1fcc8cc176b2e48","2012-12-03 10:09:01-05:00","Bugfix: Screen orientation preference working now.
"
"8a61a705de5af73323a14a15b72bbd815dd5a854","2012-12-03 17:10:58+01:00","Fix default setting on gles2n64 and gles2rice
"
"0f35a4febb96ea377258d9a333aa420846965986","2012-12-03 17:31:42+01:00","Fix Zelda MM 20 hearts bug and maybe others

To disable cheat codes ExtraArgs should be an empty string, see
CheatStart() function in ../jni/front-end/cheat.c
"
"a0b695c690d006fdadaca2c25ca85aea0c174cc4","2012-12-03 11:27:06-05:00","Prefs: simplified video prefs menu, gray out irrelevant menus.
"
"bf4630b36d2b633915b2d62ce0ed475f31e0960a","2012-12-03 20:17:06-06:00","Added emulator reset workaround

Workaround for M64CMD_RESET causing emulator to freeze.  Set the static int 'do_Start' to 1 before executing M64CMD_STOP.  This will prompt a loop to do another M64CMD_EXECUTE once the emulator as stopped.
"
"3a629809a875c63999c0a7755fed882f4d29b8d9","2012-12-03 20:28:41-06:00","Wrong project target

Didn't want Google APIs set there.  Attention to detail...
"
"9419cdc08e2a5a9c865ccdcad3602a40a4370e6f","2012-12-03 22:08:00-06:00","Temporary workaround for ASDP bug

This is a temporary workaround for the Activity Stack Double Pop behavior that occurs when the emulator shuts down, resulting in both the game activity and the menu activity closing.  Average user will now be unaware there is a problem.  May require tweaking the thread sleep times to avoid race condition (yes, this is a very ugly hack!)
"
"894e3ae5f7d967797d7e760555a9115951c23e97","2012-12-04 11:19:24-05:00","Fix two more Javadoc errors

Remove redundant String.valueOf() (since it's an int, this isn't necessary)
"
"0b142383533ee814c46b827937ecc9b55b22095b","2012-12-04 21:17:52+01:00","Add support for MingW32
"
"781f99ec5a31dc0cb9b221ff28d24300e50d69e0","2012-12-04 21:17:52+01:00","Add support for MingW32
"
"acafa1180f3984cc9d2604b0cff1be988d44ea8e","2012-12-04 21:17:52+01:00","Add support for MingW32
"
"06d5023d96ebe446347c51cbf63de1610cc6d428","2012-12-04 21:17:52+01:00","Add support for MingW32
"
"2c44ba661219cea3c3dcc83cce7168c891a000fd","2012-12-04 21:17:52+01:00","Add support for MingW32
"
"b65642a8994a985c71264c7f8b0559891b915822","2012-12-04 21:17:52+01:00","Add support for MingW32
"
"eddeb269878f5567d5b564edb5825e2f0535f6f0","2012-12-04 17:52:18-05:00","Simplified some initialization

It's safe to overwrite these objects even if they already exist.
"
"39ce2c88acf1f0447371803618b9017cfb95cbe4","2012-12-04 20:22:33-06:00","Fix crash on Froyo

Fixed NoClassDefFoundError for GameActivityXperiaPlay (NativeActivity requires Gingerbread or higher).
"
"99c97706145084c4cec82f7b7f8b3f085d267a93","2012-12-04 20:42:38-05:00","Removed Globals.paths object, made local to client classes.
"
"73b3e9b6d8d25737056f4475f5d6b616543bba7f","2012-12-04 20:50:02-05:00","Removed Globals.appData object, made local to client classes.
"
"c9ca9824edc6fad00fb57c6b7b85ebebf3267812","2012-12-04 21:20:02-05:00","Merged Paths.java into AppData.java.
"
"d3930a9d9806b1f306d17c8d8ad5bd6a6d79ea55","2012-12-04 21:24:46-05:00","Moved constants from Globals.java to AppData.java
"
"2afddfe8d1bdc3f1685d70e75fa3a632f6c6e541","2012-12-04 22:19:48-05:00","Moved Globals.userPrefs field to UserPrefs.sSingleton
"
"be8fbadb412b4efe623232815a04c191cadf4b76","2012-12-04 22:21:34-05:00","Deleted Globals class

Moved todo list to MainActivity.java, for lack of better place.
"
"40d6a5b81f0a59fd3f98cfdf481a7835ba338da4","2012-12-04 22:29:03-05:00","Encapsulated UserPrefs singleton for safer use.

TODO: Thread safety is a concern if one thread calls refresh while
another thread holds the singleton.  Currently, the only activity that
calls refresh is MenuActivity, so not sure if this will really be a
problem.  Something to be aware of though.
"
"00af27b14ef647fd7beb34d524471c74958516e9","2012-12-04 22:30:36-05:00","Refreshed master todo list in MainActivity.java.
"
"df498e858fb407ade9bd53689d0cdd768862a91d","2012-12-05 12:38:16+01:00","Added an option to use framelimiter
"
"434f2fa935e57518d450940b54a70c15ffe769a0","2012-12-05 13:49:15+01:00","Add on option to Force Texture Filter (gles2rice)

This a fix for pixelated textures in gles2rice plugin (see right part of
peach's letter in the beginning of Mario 64)
"
"86806b7fe8e68c5c70216c0e0ec2da04056f219f","2012-12-05 09:01:26-05:00","Changed UserPrefs use pattern from static singleton to local field.

This matches the pattern used by AppData.

Wasn't enamored with the singleton-based interface for UserPrefs that I
added last night.  The pattern used by AppData seems better.  Seems to
be more direct and straightforward; scoping and side-effects are easier
to understand.

Also for some classes that read user prefs, I changed their constructor
or init classes to accept just the fields needed, rather than giving
them access to the entire prefs structure.  There are pros and cons to
this. Maintenance is a little more tedious if more pref fields are
needed later, but it also makes it very obvious up front what specific
preferences are used by a class.  If people like it better the old way,
I'm not opposed.

With these updates, it is clear now that NativeMethods and CoreInterface
can be merged into a single class, since NativeMethods is such a thin
wrapper over CoreInterface.
"
"08f658b34ea86b7b0f2f45c7baac4f8169756eb9","2012-12-05 18:14:31+01:00","Update last commits using correct code formatting
"
"9067da6576f83d23bd219faa4f7b38536cc73fbf","2012-12-05 20:11:06-06:00","Consolidated extra command line args
There is now a single method to generate extra command line args for the front-end to use at launch, based on the user's preferences.  Although it appears to work now, there seems to be a logic bug in the code somewhere, as I'm seeing a warning in logcat: 'UI-Console Warning: unrecognized command-line parameter '/storage/sdcard0/Android/data/paulscode.android.mupen64plusae/tmp/Super Mario 64.v64''.  It does this for every game, but still plays them without issue.  Additionally, it doesn't appear that the frame limiter is getting disabled.  This would indicate a problem in the arg parsing code.  I will fix any problems once I've implemented the cheats menu and actually have more than one arg to parse (unless someone spots the problem before then).
"
"68ffdae9177b4305d1d23aedf8cd59ff9154b6b0","2012-12-05 22:07:15-05:00","Formatted preferences.xml and fixed PreferenceCategory syntax.

Enclosed subordinate preferences between <PreferenceCategory> and
</PreferenceCategory>.  Before I wasn't enclosing the preferences and
just using <PreferenceCategory />
"
"3a8c806fc4175454cef59e9f420d43b7053f67ab","2012-12-05 22:09:43-05:00","Updated button mapping process to follow user expectations.

Now when a user touches a button, a small listener dialog pops up to
capture the input code.  This is the same as the behavior in 1.9.2,
although the implementation is a bit different to fit with the new
input architecture.
"
"1605e5830a450735922e0f7b379cc5e9e0051616","2012-12-05 22:24:48-05:00","Removed obsolete functionality from InputMapPreference.

No longer need to remember the last 'active' input pressed. since we no
longer map inputs that way.
"
"c876905c34f5302c3cd3bc4b01efb525c939a2d4","2012-12-05 22:38:04-05:00","Localized some strings in InputMapPreference, put dialog title back in.

TODO: Japanese translation for the following strings:
<string name='inputMapPreference_popupMessage'>…</string>
<string name='inputMapPreference_popupPosButtonText'>…</string>
"
"79d89c0d44dee676c2d7a6c3ddd2e9ce42446fee","2012-12-06 08:43:20-05:00","Update Japanese translation.
"
"4435e4690ccf1b0d95c95d561ba456e3a1acd926","2012-12-06 17:56:33+01:00","Added a fix for zelda OOT subscreen delay

This is just a hack to force using the subscreen delay cheat code for
the corresponding version of zelda OOT, this will not affect manual
cheat code.
"
"8db1c6eca39ce41b2fd4e453bc7303dfed78cfe0","2012-12-06 17:16:15-05:00","frontend: bugfix: Null reference

Reported here:
http://www.paulscode.com/forum/index.php?topic=727.msg6877#msg6877
"
"fac14e292b3718cce2fa525d4b70150bc121dcac","2012-12-06 17:38:54-05:00","frontend: Tidy up AppData.HardwareInfo class.
"
"1faf55b9fb86f2f0e813f36f6e7aed8b7b616459","2012-12-06 18:50:04-06:00","Added new hardware profile
After the update to Jelly Bean, the Galaxy Nexus (TI OMAP4460, PowerVR SGX540) required a new set of polygon offset values to fix the flickering shadows bug.  The new values do not match any of the previous profiles, so I added a new profile.  The profiler checks against both the hardware string 'tuna' and the Android version to decide which profile to use.
"
"3f1de243e9401e4e06ed214f6be193b45d56f44d","2012-12-06 19:51:16-05:00","frontend: Removed orientation constraint from splash screen activity.

Since the other activities are no longer constrained, no need to
constrain this one either. If we don't like the aesthetic of the splash
screen in portrait, we can always rearrange the layout resources...
"
"371fceddbbc6a4ad0bb3e09ebc4086ae26e701be","2012-12-06 18:56:08-06:00","Merge branch 'master' of github.com:paulscode/mupen64plus-ae
"
"9ceac9ecf969c563398cd54877a8d8254cbb3a21","2012-12-06 20:15:56-05:00","front,wip: Added alternate layouts for mapping screen on small devices.

This gets the job done in terms of functionality. I'll implement some-
thing else soon that's a little more elegant for small screens.
"
"e8cfd410c1fcd8f29f8c2de526722bfd4ed5adcd","2012-12-07 09:10:29-05:00","Simplify HardwareInfo even more. Now that the strings are empty by default, there isn't really a need to test for them.

Also, changed the loop into a foreach loop. This makes it easier to see what's going on.

Also, changed two array declarators to be 'type[] var' instead of 'type var[]'
"
"e809fb6db599ab989b16915db7cbd6706aceda1e","2012-12-07 09:13:20-05:00","Forgot to commit the main file (AppData.java) that was changed last commit.
"
"fa525f81d14eaa59cc5fe7e664385a2cc76936cc","2012-12-07 09:20:33-05:00","Remove an unused method from ConfigFile.java

Also remove unused imports.
"
"e1156ecbb34b4686d3487236e24972d105046466","2012-12-07 09:30:43-05:00","front: Polished AppData class, removed obsolete methods, enhanced doc.
"
"cd6281fc4c20591d7849921b6d12e42d98560335","2012-12-07 15:44:12+01:00","Fix unstreched frame position (gles2rice)

The frame is now correctly positioned at the center of the screen when
using unstreched mode.
"
"0cd68ed3d83da2ded22d23e54c83fbd993147127","2012-12-07 10:05:03-05:00","Remove a redundant if-statement from ConfigFile.java

Added a method to Utility that checks if both a string is null or empty. This can shorten if statements in the future.
"
"f09113bc6b91a0dec37b859af4f915161cd1878e","2012-12-07 11:36:06-05:00","front: Finished layout for input mapping screens on small devices.

I'm finished with the preliminary design now, just awaiting feedback
from the other devs and users. No plans to change anything until then.
"
"bd4daee6b5386ca967f57c5b28af5515edfd6b3f","2012-12-07 14:28:22-05:00","front: Tweaked a couple strings.

TODO: Translate.
"
"2a83ecf1c0edd5c45816bba7f2d6595b6d551d9e","2012-12-07 17:03:37-05:00","front: Cleanup GameMenuHandler, substitute utilities, add TODOs.
"
"fc6c6c817dc2c6afe25033a6157cb7de3a1f3cee","2012-12-07 17:06:08-05:00","front: Cleanup MenuActivity, modularize logic, improve readability
"
"729aa55ac55fa8b4d1ef59c32722cc7f494042a0","2012-12-07 18:18:30-05:00","Make GameSurface use GLSurfaceView instead of SurfaceView. This is much more appropriate, considering what we're rendering.
"
"4d2b1c49e95d50e2ccbc44cf9813b92eef6812b3","2012-12-07 22:33:19-05:00","front: Integrated ACRA (auto crash reporting system).

See http://acra.ch
"
"305fb1eeecaffaf70a8ec4b5199358d57c0a5b35","2012-12-07 23:57:19-05:00","front: Tidied video settings screen, irrelevant categories now hidden.
"
"3f708f0c01b229686d18533cf3e2060623a2f6a3","2012-12-08 12:38:20+01:00","audio-sdl: Merge 'upstream/audio-sdl' hg:85:c75faf4d38c4
"
"8a6b001d9b80e9ea0f178cc787afb19b972ceda1","2012-12-08 12:50:31+01:00","rsp-hle: Merge 'upstream/rsp-hle' hg:89:bf4a5b4315de
"
"ede6bb8943e7ed0d38cd0ff384e4346ef8d4aa74","2012-12-08 12:56:15+01:00","input-sdl: Merge 'upstream/input-sdl' hg:151:862d5c75a547
"
"326abe2cc8464d1109d16c353162805a12edb391","2012-12-08 13:08:18+01:00","front-end: Merge 'upstream/ui-console' hg:122:0f9dd3c1dd6d
"
"b8f957572fa2734ade3b0e8b69989026d6db556a","2012-12-08 13:21:51+01:00","core: Merge 'upstream/core' hg:490:7fcbe13a6054
"
"f628b8f54bc88678aa963a2ee37a5772693dbc5c","2012-12-08 13:31:59+01:00","gles2rice: Merge 'upstream/rice-video' hg:161:fb79d1d2c448
"
"50678c0e3200ef8721ee88e799ffa55daa63126b","2012-12-08 09:58:53-05:00","front: More simplification to MenuActivity implementation.

A little less effort required to add new click handling.
Rearranged the order of the methods to keep similar functions together.
"
"b0a67bea54e3fc1a1971368ad8a552971acf04a4","2012-12-08 10:49:37-05:00","front: Add null check to fix FC bug added recently.
"
"c166fa2f3a9f0bd1b2d23674aca694e3104079fe","2012-12-08 11:10:27-05:00","front: Fix one more thing I just broke (sorry).
"
"9e0a355a39c5f0d420538f8f460f639b3c8bec3e","2012-12-08 13:49:43-05:00","front: Remember slot value between sessions; remove legacy features.

Features removed:
- Backup gamesave files before reinstallation
- Remember if this is the 'first time' being run
"
"88ddb521636b6968757c88056fbd323735ee4a1a","2012-12-08 14:31:43-05:00","front: Polishes to GameMenuHandler implementation.
"
"4c54d2d8c672a58b909be973c55a35072fc83845","2012-12-08 15:57:48-05:00","Simplify isDownloadRequired in DataDownloader.java
"
"994acbd249036b51447cf1ccf1ef2c99fb495f17","2012-12-08 21:56:11-05:00","front: Added button mapping screens for Xperia PLAY.

These are just tweaked versions of the normal versions. The only
difference is that the c-pad and analog stick icons have been removed
and an explanation text box put in its place. This should make it clear
for XPlay owners that they do not need to map the c-pad and analog
stick when their touchpad is enabled.
"
"fed588f6293edb662c9c5c1eca42c7afd4cf3f7c","2012-12-08 22:16:57-05:00","Merge remote-tracking branch 'origin/feature_AutoCrashReports'

The crash reporting preferences are at the bottom of the Advanced menu.
"
"4b95a20222c51cd1506f40ec4f1aec7dd3eb5717","2012-12-08 22:37:25-05:00","front: Eliminate warning.
"
"dd7b74a58305b65add25a07be8bd2df61f134ca0","2012-12-08 22:45:04-05:00","front: Added confirmation dialog before resetting preferences.
"
"19724da7345a4ff07b3d26861d364101311f1969","2012-12-09 13:45:50-05:00","front: Bugfix - Unable to map some analog inputs.

Bug reported here https://github.com/paulscode/mupen64plus-ae/issues/16
as well as numerous times on the forum.

Due to a quirk in Android, analog axes whose center-point is not zero
(e.g. an analog trigger whose rest position is -1) still produce a zero
value at rest until they have been wiggled a little bit. After that
point, their rest position is correctly recorded. The problem is that
LazyProvider calibrates the rest position of each analog channel based
on the first measurement it receives. As a workaround, we provide a
calibration button, which makes the user go through a little dance to
ensure all analog axes are pressed, then re-centers itself.

The word 'Calibrate' is a bit of a misnomer here (Re-center is more
accurate) but I think users would be more inclined to hit a 'calibrate'
button than a 're-center' button when things 'aren't working'.
"
"5cddbac24e7296460902a5a11fde6e5b617cb19b","2012-12-09 15:00:04-05:00","front: Tweak calibration dialog mechanics, improve readability.

Previously, when the calibration dialog closed, it would also close the
button mapping screen, which is both confusing to the user and loses
the dirty map they may have been in the middle of defining.  This fixes
that by reopening the mapping screen, and restoring the dirty state of
the map. Also added a 'cancel' button to the calibration screen. Though
the consequences of pressing OK when user wishes to cancel are trivial,
adding the cancel button provides provides peace of mind and a sense
that the user is always in control.

Moved some of the nested anonymous listeners to the parent class, for
readability.
"
"ded9295fa83a7641017d23baf9d99807e8850502","2012-12-09 15:28:48-05:00","front: One more tweak to calibration dialog mechanics.

If user pressed back button instead of cancel, dirty state was lost
(i.e. the thing the last commit fixed).
"
"fbe110cd525be58e9bedfe914cc71411f82b1fb6","2012-12-09 18:15:01-05:00","front: Fade unmapped buttons for all APIs, not just HC.

Not quite as pretty for pre-Honeycomb... but better than nothing.
"
"d6fd1ac1f7a20b69988a12aa574cd7d73d6ce806","2012-12-09 18:51:15-05:00","front: Tweak some drawables.
"
"ff56ce7aa35b19edeef4e51ffb77f63784b201e8","2012-12-09 17:11:47-08:00","branch merge with no extra changes
"
"e5969dab23f7212a8598ab4625ad62e36a3dd88f","2012-12-09 17:27:10-08:00","updated Logitech Chillstream controller config from Nils Gerlach
"
"b1aac087430cafe6d5fd7584a5ea4b7d7b285445","2012-12-09 23:41:20-05:00","front: Encapsulated the wait-for-rom-load process into CoreInterface.

Was this the last global variable in the app?
"
"12477294a3740e352f4847298418bd3702ea65ff","2012-12-10 11:31:15+01:00","Using the existing macro sl() for CRC computation
"
"bd8062fc33eb7be303df59bd8854f4ba0c7ece8c","2012-12-10 11:57:49-05:00","front: Update web link to crash reports.
"
"abc5f34aa3933fd59bd0c9bf3ad2f365ce77c1aa","2012-12-10 21:33:36-05:00","front: Updated peripheral info, added cpu/periph info to crash report.
"
"65c8608ff64b0810df30c03eb7c3d970b09e14b1","2012-12-10 21:47:00-05:00","front: Update crash test button.
"
"2b9fefec4b432aa2a296e9ee3ed51b77725959b4","2012-12-10 22:02:21-05:00","front: Remove 'Unstable Preferences' from settings menu.

No longer needed, just extra clutter at this point.
"
"20b23e3acd4a0e75f1202f608fc1f3f03892915c","2012-12-10 22:33:36-05:00","front: Cleanup unused strings, add missing strings.  TODO translate.
"
"abc056d9e66fa8d2afc9e080783a06a072426180","2012-12-10 23:22:09-05:00","front: Consolidated 'Touch' and 'Analog' touchscreen skins.

If RedrawJoystick == Never and Layout == Analog, substitute the Touch
skin.
"
"0cbda45821cf190cf48420bb51130194c8287071","2012-12-11 08:28:07-05:00","Update Japanese translation.
"
"12cf3275881199acad408931bfdd5fdd6945b2e7","2012-12-11 10:31:59-05:00","front: Hide serial number from proc/cpuinfo and crash reports.
"
"fca1b7523b22941f9b4fcca98f1d39d175acca6d","2012-12-11 15:50:30-05:00","front:bugfix: Auto frameskip for gles2n64 works again.

Feel free to revise the wording in strings.xml
TODO: translate-ja
"
"81e9775d452a010aa7cf74a2fbb5768b51121e9a","2012-12-11 18:58:16-05:00","front: Tweak strings for clarity (?)
"
"a80ad8f38be7ac690ec7506d625e9621387b46bc","2012-12-11 19:12:16-05:00","front bugfix: Pressing dpad after calibr. left one direction unusable.

Explanation in the source code comment. Would be nice to find a more
elegant solution to the problem of un-centered initial axis values.
"
"ad957cb0167594d511c18b386ceecf326f1b53f5","2012-12-11 20:30:53-05:00","Update Japanese TL.
"
"f4d2c481fdedf3ae942ef357a62e32d5ff32c764","2012-12-11 22:38:29-05:00","front: Remove stick calibration button if not applicable.
"
"ef930de26912936c94000bf1a97453b8516e9e5d","2012-12-12 00:02:19-05:00","front: Splash image fills screen again.

Accidentally changed this a while back.
"
"7c691e45a4492664a68f9ce82746aa52ec0d6d86","2012-12-12 11:22:51-05:00","bugfix: Input map preference wasn't persisting on dialog close.

Bug introduced in commit 5cddbac24e7296460902a5a11fde6e5b617cb19b
"
"1c8c993607f93662b80d65f7d1863e9dce28c8ab","2012-12-12 16:32:11-05:00","Remove unnecessary code from MainActivity.

This is called by DataDownloader.java when it's done.
"
"b14542b8644425575e2ac0f2ed34c471865633e0","2012-12-12 16:49:51-05:00","Be explicit about the emulator state in GameMenuHandler.java

Much more informative than just a magic 3.
"
"117e33e99d1d0ee67808441865efff34cc68808b","2012-12-12 16:57:07-05:00","Remove unnecessary 'onDestroy()' method.

See commit 1c8c993607f93662b80d65f7d1863e9dce28c8ab for the reason why.
"
"2c653a14d5ed4c66298221f69e089f5aa8bff17a","2012-12-12 23:17:23+01:00","Don't add malformed/missing linker flag to LDFLAGS on MinGW
"
"a4a37961ed35d7ae942dfe04c517304dcaf0f119","2012-12-12 23:18:49+01:00","Don't use unwritten time information for RTC read on MinGW
"
"bbe021bc016fb1af0b97b9bcca77b7a68d3e5c82","2012-12-12 23:19:39+01:00","Really build mupen64plus.exe on MinGW
"
"88755cc065409b07395b48ad281f171850df0c30","2012-12-12 21:18:32-06:00","Initial Cheats Menu Implementation
Dynamically generated cheats lists and option dialogs are managed by the CheatsMenuHandler class.  There are a few remaining bugs with this initial implementation.  The main issue to resolve is the cheats preference category is cleared out upon orientation change.  A call to the refresh method at the appropriate time should fix this.  Feel free to hack away at this and change things around to work better.
"
"2e48efa2b0f10e4fa547704bd559c1cfa7010b9a","2012-12-12 21:26:10-06:00","Excuded crashreport.txt
"
"afd04143c5c50002108a8609ae1d0f1a6802e0a6","2012-12-12 22:30:21-05:00","Remove some 'wat' level code.

Even the add method doesn't do this.
"
"b6c0f85f0d32cf02a6a458b947345fef41befe81","2012-12-12 22:31:56-05:00","Remove unused imports from new cheat menu changes.
"
"7265401ae8354bd2d64b4d5d8a511754dbd9c41b","2012-12-12 22:37:16-05:00","OptionCheckBoxPreference.java
- Made two of the fields final.
- Replace for-loop with direct array copy.

OptionDialog.java
- Made a field final.
"
"68218982c964730883798eafb2289c839e57bd5e","2012-12-12 21:57:32-06:00","deleted crashreport.txt from repository
"
"335185622173ff971dcfd4ec8d48b3b708730186","2012-12-12 23:17:21-05:00","Simplify some things in CheatsMenuHandler.java
"
"9972284384546b1d4c18fc4da7825ed6e020da2a","2012-12-12 23:34:03-05:00","Fox typo in log message

also tempdir variable made final.
"
"79e1e8e7abd331208b2247e2f2f86d0767944476","2012-12-13 10:45:53+01:00","Remove duplicated definition of MKDIR and CC for MinGW
"
"920aeeb8e19134e10d1372230136792e047d1b75","2012-12-13 10:46:16+01:00","Remove duplicated definition of CC for MinGW
"
"e7e9f8e42c5083fe65f153d470e63a071ccb1d64","2012-12-13 10:46:17+01:00","Remove duplicated definition of CC for MinGW
"
"68a5b42c15c589c52edd9cff5d8af75dcaf07e3a","2012-12-13 10:46:17+01:00","Remove duplicated definition of CC for MinGW
"
"56e17c040064477f237dffbe7bc57f194450f6c5","2012-12-13 10:46:17+01:00","Remove duplicated definition of CC for MinGW
"
"de604475185421d0c51f59af06732e2a8d5170e7","2012-12-13 10:46:17+01:00","Remove duplicated definition of CC for MinGW
"
"af8974e1ee1184ea5e588a68650cccbe59d66e55","2012-12-13 10:52:49+01:00","Synchronize usage of environmental variables for UNAME with HOST_CPU
"
"689e011f7f3f4cf36c347bf06f800d7fae52fbeb","2012-12-13 10:52:49+01:00","Synchronize usage of environmental variables for UNAME with HOST_CPU
"
"9538dad8c348d5c61c78004d001622c4b4955ae2","2012-12-13 10:52:49+01:00","Synchronize usage of environmental variables for UNAME with HOST_CPU
"
"08b53f2444d52d9479879e6d829373685cc38f5c","2012-12-13 10:52:49+01:00","Synchronize usage of environmental variables for UNAME with HOST_CPU
"
"069856f10e9adaef23fa57e26d36301bc46caa80","2012-12-13 10:52:49+01:00","Synchronize usage of environmental variables for UNAME with HOST_CPU
"
"8c7c88732317f1d23576087454120a6170be7574","2012-12-13 10:52:49+01:00","Synchronize usage of environmental variables for UNAME with HOST_CPU
"
"95db8eec0ed0b61bcd2a7705b7d65f56b78acc17","2012-12-13 11:33:49+01:00","Allow to change names of *-config tools for cross compiles
"
"012bd66c1e699e845ab103bae435cf31e7cc44e7","2012-12-13 11:33:49+01:00","Allow to change names of *-config tools for cross compiles
"
"ae5b17fed0d8c305def1897642db9ec4c19e743e","2012-12-13 11:33:49+01:00","Allow to change names of *-config tools for cross compiles
"
"10b90e46473fe0667b6ea8afd6fdae7cba19f3a8","2012-12-13 11:33:49+01:00","Allow to change names of *-config tools for cross compiles
"
"419d442013253adc1570db89f875ef8230cd2060","2012-12-13 11:33:50+01:00","Allow to change names of *-config tools for cross compiles
"
"be8738e1978161ca2dac180434c97445b33933b7","2012-12-13 12:25:23+01:00","Add CROSS_COMPILE make option

The CROSS_COMPILE make option can be used to automatically prepend the prefix
to all build relevant tools to seamlessly allow cross compilation without
setting each tool name separately.

Cross compiling for MinGW32 would can be done using
$ make -C projects/unix/ CROSS_COMPILE=i686-pc-mingw32- HOST_CPU=i686 UNAME=MINGW
"
"c7aa2d39604763ea8d4c63f69fc10eb91c3ad005","2012-12-13 12:25:26+01:00","Add CROSS_COMPILE make option

The CROSS_COMPILE make option can be used to automatically prepend the prefix
to all build relevant tools to seamlessly allow cross compilation without
setting each tool name separately.

Cross compiling for MinGW32 would can be done using
$ make -C projects/unix/ CROSS_COMPILE=i686-pc-mingw32- HOST_CPU=i686 UNAME=MINGW
"
"7e92b3d81c701bca53a902024621d3023aa3f387","2012-12-13 12:25:30+01:00","Add CROSS_COMPILE make option

The CROSS_COMPILE make option can be used to automatically prepend the prefix
to all build relevant tools to seamlessly allow cross compilation without
setting each tool name separately.

Cross compiling for MinGW32 would can be done using
$ make -C projects/unix/ CROSS_COMPILE=i686-pc-mingw32- HOST_CPU=i686 UNAME=MINGW
"
"61708f658821cb818addb440af1f8cc4205c8e10","2012-12-13 12:25:33+01:00","Add CROSS_COMPILE make option

The CROSS_COMPILE make option can be used to automatically prepend the prefix
to all build relevant tools to seamlessly allow cross compilation without
setting each tool name separately.

Cross compiling for MinGW32 would can be done using
$ make -C projects/unix/ CROSS_COMPILE=i686-pc-mingw32- HOST_CPU=i686 UNAME=MINGW
"
"3b7bee6a33325f85aa7b7580ca5e5ad5f7612386","2012-12-13 12:25:38+01:00","Add CROSS_COMPILE make option

The CROSS_COMPILE make option can be used to automatically prepend the prefix
to all build relevant tools to seamlessly allow cross compilation without
setting each tool name separately.

Cross compiling for MinGW32 would can be done using
$ make -C projects/unix/ CROSS_COMPILE=i686-pc-mingw32- HOST_CPU=i686 UNAME=MINGW
"
"9973c9aa9115ef7c1c80714fae4844fc34258b3c","2012-12-13 12:25:44+01:00","Add CROSS_COMPILE make option

The CROSS_COMPILE make option can be used to automatically prepend the prefix
to all build relevant tools to seamlessly allow cross compilation without
setting each tool name separately.

Cross compiling for MinGW32 would can be done using
$ make -C projects/unix/ CROSS_COMPILE=i686-pc-mingw32- HOST_CPU=i686 UNAME=MINGW
"
"8cb19be53ea125d404a6f3b1a32b49758b0296a3","2012-12-13 12:30:44+01:00","Don't add lipng libs twice on MinGW
"
"3050189433b42ca5e9475b1e9f7a62e273d9b7e8","2012-12-13 14:07:56+01:00","Fix order of Makefile targets to print help by default
"
"06e28dc991fee3839bf649b05c6e6d1094cca3c3","2012-12-13 14:07:56+01:00","Fix order of Makefile targets to print help by default
"
"25217eacdd3c553adcc0ae13043a4db67c3c8787","2012-12-13 14:19:37+01:00","Fix clean of mupen64plus.exe
"
"80c094b42193fa5837f89b37ae411bc007592061","2012-12-13 14:47:15+01:00","Allow to add a postfix for each build

The POSTFIX make option is useful for distributions to compile different
versions of the plugin in parallel. The object files will be stored in a
directory with the postfix appended and the linker result will also have this
postfix appended.
"
"a0880f0aa36f10831cc1c12587c2c4ff225c575a","2012-12-13 14:47:17+01:00","Allow to add a postfix for each build

The POSTFIX make option is useful for distributions to compile different
versions of the plugin in parallel. The object files will be stored in a
directory with the postfix appended and the linker result will also have this
postfix appended.
"
"c06750ed2044ca6a6ea579e985863c054677de0a","2012-12-13 14:47:25+01:00","Allow to add a postfix for each build

The POSTFIX make option is useful for distributions to compile different
versions of the plugin in parallel. The object files will be stored in a
directory with the postfix appended and the linker result will also have this
postfix appended.
"
"c4823340547a3b08b706ca0173718527ade9ed02","2012-12-13 14:47:28+01:00","Allow to add a postfix for each build

The POSTFIX make option is useful for distributions to compile different
versions of the plugin in parallel. The object files will be stored in a
directory with the postfix appended and the linker result will also have this
postfix appended.
"
"ea51d4457d3f98cbea1eb18a3600a2bfb1c9d8fa","2012-12-13 14:47:30+01:00","Allow to add a postfix for each build

The POSTFIX make option is useful for distributions to compile different
versions of the plugin in parallel. The object files will be stored in a
directory with the postfix appended and the linker result will also have this
postfix appended.
"
"14af485493562a4a26de401d0e9f9231aa06d8fb","2012-12-13 14:47:33+01:00","Allow to add a postfix for each build

The POSTFIX make option is useful for distributions to compile different
versions of the plugin in parallel. The object files will be stored in a
directory with the postfix appended and the linker result will also have this
postfix appended.
"
"4066559a7085fb5def629d3dcbe222106fcfd9ec","2012-12-13 14:53:04+01:00","Use $(OBJDIR) in clean target instead of hardcoded path
"
"3a797083e1a64916ad6f704e25e8c99179133c31","2012-12-13 14:53:05+01:00","Use $(OBJDIR) in clean target instead of hardcoded path
"
"c82cecc6858047db957bb676fdad40c070136438","2012-12-13 14:53:05+01:00","Use $(OBJDIR) in clean target instead of hardcoded path
"
"a8b5adec727c30f18de07c6242fc43f94370bc9d","2012-12-13 14:53:05+01:00","Use $(OBJDIR) in clean target instead of hardcoded path
"
"42f26b8a032454382d811c27014466733bd94e1b","2012-12-13 14:53:05+01:00","Use $(OBJDIR) in clean target instead of hardcoded path
"
"9a922cdc782cf48bbbf268aa14567b6228fc8719","2012-12-13 14:53:05+01:00","Use $(OBJDIR) in clean target instead of hardcoded path
"
"3375f3aede7f3cd1043ff35e91feb58eab682681","2012-12-13 09:50:17-05:00","Bugfix: Fixed hang at launch due to orientation change.

Doh! There's a good reason Paul put these in in the first place. I
should have just trusted him. Well, now there's an explanation I guess.

Prior to this fix, bug occurs by holding the phone in an orientation
that is different from the one selected in the video preferences, then
launching the game. The game activity launches, requests an orientation
change, and by default Android tries to restart the game activity...
leading to the stall. To circumvent this we tell Android not to restart
game activities on orientation change. Since API 13 this also means we
need to tell it not to restart for screen size changes (API 13 treats
orientation change as a size change as well).

I suppose we could tell Android to never restart game activities, by
setting all the manifest flags... but somehow that seems excessive. The
'Android way' would be to fix the restart issue altogether and permit
game activities to be restarted without issue. Don't know if that's
practical for our app, but that's google's 'preferred' solution. Just
to keep in mind in case it becomes practical at some point.

References:
http://developer.android.com/guide/topics/manifest/activity-element.html
"
"a099289ef4fd8e2af129db160fcc5e67575897e9","2012-12-13 16:53:33+01:00","Fix L button on WiseGroup.,Ltd TigerGame XBOX+PS2+GC Game Controller Adapter

The wrong axis direction seemed to be used as described in issue #527 by
gouessej@gmail.com
"
"983781eafa58ec5a7bf6bc8c79a34887165979fb","2012-12-13 10:53:53-05:00","Bugfix: Map screen now refreshes after XPlay touchpad enable/disable.
"
"5f2c99fee69d84e8be9c996f0959dcf74a1210af","2012-12-13 23:01:45-05:00","Feature: Back button mappable for pre-Honeycomb devices

This is especially important for the Xperia Play since one of its face
buttons (the circle) is a hardware Back key.

TODO: HC+ devices can't use the Back key in-game since it's used to
toggle the Action Bar, a critical element of the UI.  However an HC+
user is still able to map the Back button in the mapping screen. I
could easily add the same logic for that screen... but hoping for a
cleaner solution that doesn't involve so much special-case handling.
For example,
- use an alternative method to opening the action bar, such as a down-
swipe, thus freeing the back button for all devices
- just allow users to map these buttons, and they'll figure it out on
their own when they fail in game.
- be more formal about what buttons can and can't be mapped, i.e. make
a black-list class that is then shared by all key handlers.
"
"5d5447f898164d8441fdc57a48cae0050e613584","2012-12-14 00:10:15-05:00","Implemented simpler mechanism for handling special keycodes.

This largely addresses the TODO in the previous commit,
5f2c99fee69d84e8be9c996f0959dcf74a1210af

Now if a key is unmappable, either by preference (vol keys) or by GUI
requirements (back, menu keys), we get the same behavior in-game as we
do in the mapping screens.  Also a much easier approach to maintain, as
unmappable keys are all defined in one place: UserPrefs.java.

Also changed the name from isVolKeysEnabled => isVolKeysMappable for
clarity.
"
"9b9d10a9fe346700d877c8fca2eed6775009104d","2012-12-14 00:18:55-05:00","Remove obsolete field.

With commit 5d5447f898164d8441fdc57a48cae0050e613584,
this variable is superfluous to the public interface.  Client code
should just use the unmappableKeyCodes field for this information.
"
"ab8de8fadef3ce02a068b1b012f8e79be7d7c7c0","2012-12-14 08:49:46-05:00","Tweaked mapping screen to provide more screen space for small devices.
"
"bc4bc8931101c81f4cefd66eba5169ee25ea0899","2012-12-15 00:05:05-06:00","Added JNI linkage to emu state callback
The Java front-end can now synchronize with state changes from the core.  As an example, I implemented a rudamentary state change listener setup and used it to re-write the ASDP workaround a lot cleaner and more thread-safe than before.  I actually kind of cheated here by altering the core to make the work-around simpler.  The reason for this is because the core save-state function operates asynchronously with the state-change functions -- so I invoked the callback at the top of the save-state function to report the emulator in a 'paused' state, and then at the end of the function to report the emulator in a 'running' state.  This is only needed for the temporary workaround.  Once the ASDP bug is fixed, these two extra callbacks can be removed, unless they are adopted up-stream.
"
"c886fa9de89981bdb7596e3bbf3ba4841d4901f9","2012-12-15 08:51:40-05:00","Simplified game activity pop mechanics.
"
"e4ad3fa295894efce69d4c1e60c87033a7680f9c","2012-12-15 15:44:27+01:00","Merge branch 'ecsv/upstream'
"
"512e0b81565230e9fdbb4a55120bdf98e6bee9e7","2012-12-15 21:12:07-05:00","Improved robustness of input calibration/mapping.
"
"856a6ef2daa80be7cd6e898d7ca80bd7421497ee","2012-12-15 21:21:42-05:00","Put feedback text back into mapping layouts for small screens.
"
"c724cbc41a27f445850a6d2272f7262d5b0afa98","2012-12-15 23:05:42-06:00","Incorporated state callback into GameSurface.surfaceChanged
Another great use for the emu state callback: blocking the current process until a particular state is reported.  To demonstrate, I used this to rewrite the previous flag-and-wait procedure in GameSurface.surfaceChanged with a cleaner, thread-safe procedure.
"
"a3c15e324eee9075d1c9deda4d3bee711a5f30b7","2012-12-16 01:03:11-06:00","Removed another flag and loop
Using Java's wait() and notify() methods to block the process, instead of the boolean-flag-and-sleep-loop procedure.
"
"f3f72c0fe66c4570cb281d11de46e01a3dfef5d4","2012-12-16 01:11:44-06:00","Release listener when finished with it
Holding on to the temporary OnEmuStateChangeListener will cause unexpected behavior the next time the specified state is reported, so better release it when we are done using it.
"
"4b32651c1f1b445ca8aabd1d956c3aba967a8311","2012-12-16 09:15:23-05:00","Enhanced PathPreference implementation (more portable, more robust)

The default values are provided in the XML file now, rather than in the
java code, making this much more modular and general. Also provides two
options for handling non-existent path (e.g. fresh install, user moved
the file/directory):
1 - Fall-back to the external storage directory (default)
2 - Create the parent directories needed to make the path exist

The former is useful for directories the app will be reading from
(e.g. a directory for user-provided inputs, where the user may have
moved the files between sessions).

The latter is useful for directories that the app will be writing to
(e.g. a directory for cache files, where the dev wants to ensure the
app doesn't clutter the storage root).
"
"8f150522582c13f2ff5d2f5d74a2dbe2693b2f0d","2012-12-16 11:26:52-05:00","Manual saves now written to ROM-specific subdirectory of ./GameSaves/

To simplify browsing manual gamesaves.  When playing mario, user will
only be presented with manual saves for mario, and won't see manual
saves for zelda.
"
"fd73c90fed5b8a516fea52ccd9fba2b7edf55727","2012-12-16 11:29:21-05:00","Eliminate warnings, cleanup unused items.
"
"0963108e68b92fe93c96db7caec9b5a313e22807","2012-12-16 19:57:26+01:00","Add support for SDL 1.3
SDL 1.3 separated KeyCodes and ScanCodes in its API. The new names for the
scancodes can therefore be easier 'backported' than the old name which would be
conflict with the still existing KeyCodes. A simple compatible wrapper is
enough to allow coexistense of SDL 1.2 and SDL 1.3 code.
"
"76fcac18878408056d5bd2e8d6c30f8431c40d92","2012-12-16 19:57:26+01:00","Allow to compile against SDL2
The Grab API of SDL now needs the SDL_Window to work. This information is not
provided by Mupen64Plus and therefore such functionality is currently disabled
when building against SDL 2.0. Further adjustments of the Mupen64plus API
should consider moving this functionality do a different part which has access
to all necessary informations.

The Joystick API only changed in such way that it is possible to use a
compatibility wrapper.
"
"2d87ed0491fcc99575ff16e44c108086a83cb5b5","2012-12-16 20:06:31+01:00","Add support for SDL 1.3
SDL 1.3 separated KeyCodes and ScanCodes in its API. The new names for the
scancodes can therefore be easier 'backported' than the old name which would be
conflict with the still existing KeyCodes. A simple compatible wrapper is
enough to allow coexistense of SDL 1.2 and SDL 1.3 code.

The changes in the event struct cannot handled that easy.

glu isn't supported anymore by SDL_opengl.h. It has to be important manually by
the user of glu functions.
"
"8b55484c56fe0b227a79e752c9d4552a283f3424","2012-12-16 14:53:23-05:00","Implemented default values for InputMapPreference.

The map defaults can now be specified in the XML resource, rather than
the java code. As an example I created default serializations of both
the PS3 and the Xbox360 controllers.

Right now, the off-the-shelf configuration is Player 1 enabled, using a
PS3 controller. So for those users, they don't even need to go into the
mapping screen after installation, they can dive right into a game.
"
"b1c5e6a59cc06dc101afc68531a3e6737f8d77b5","2012-12-16 15:20:29-05:00","Moved path defaults to strings.xml for easier maintenance.
"
"4a2a5304b711a3e415e1595f566277588336ddda","2012-12-16 18:40:27-05:00","Remove unnecessary assignment in CheatsMenuHandler.java

Add final to some fields in classes.
"
"2e16f839a8b772df30d53a8a6dda3d31374af166","2012-12-17 12:39:28-05:00","Bugfix: MENU key is unmappable for all devices again.

Bug reported here:
http://www.paulscode.com/forum/index.php?topic=723.msg7150#msg7150
"
"e8d58cc7f9cf4b563b633f7c244bdf85b9f5e009","2012-12-18 14:57:25+01:00","Map 'Controller' under OSX to 'Microsoft X-Box 360 pad'

The OSX driver seems to name the Controller using the 'unique' name
'Controller'. Therefore, mapping them to the 'Microsoft X-Box 360 pad'
configuration may be a valid workaround for users of compatible gamepads.
"
"4c0b89599d805c92185c27dd93819f89902da56e","2012-12-18 18:00:23+01:00","Added on option to change emu speed

For now I've just hardcoded the custom speed value because I don't know
what is the best implementation for this, I have two ideas:

- users choose the custom speed value in settings before starting the
emu and then use the speed button to apply custom speed or default
speed.

- users start the emu, use the speed button that draw a seekbar onscreen
and than choose a custom speed or default speed.
What you guys are thinking about that?

Also I haven't found a good icon for the speed option, so right know I'm
using the 'about' icon but I was thinking about using a clock icon.
"
"dc7ff693f6ec5cdf2a2d6398710cf93916b3aa7b","2012-12-18 20:08:27+01:00","Core: Remove SPEED_SET command
"
"f975687992ea158bcec24250af454bd3807b4f26","2012-12-15 18:34:59+01:00","input-sdl: Remove non-functional differences with upstream/input-sdl
"
"a05f1cc03be6c80351bcecd2e558bcf7a951837b","2012-12-18 17:11:08-05:00","Add some documentation to the EGL related calls in GameSurface.java
"
"c5df84f651167868b312d938f147a319280746dc","2012-12-18 17:17:21-05:00","Correct a mistake in the documentation of GameSurface.java
"
"d8a24153fa8803600afd12bca103abb83b704ba5","2012-12-18 18:04:17-05:00","Fix a typo I completely missed.

Thanks for noticing this Paul.
"
"e3d6ea0f5e3cd6d5332c41fa3b881cde6d22d9d0","2012-12-18 18:55:28-05:00","Update Japanese translation, and also highlight a localization issue in CheatsMenuHandler.java
"
"7d9aca8884ca5b07847b37c62e871cbda2cf29b1","2012-12-18 18:58:12-05:00","Fix the todo message in CheatsMenuHandler.java. Shift-JIS encoding mangled it.
"
"dac4f6efcb5ca296416fb252225dfeb084076ae8","2012-12-18 19:27:09-05:00","front: Added uncompressed assets (no changes)

This just includes the extracted versions of the files inside the zip
file, so that the interesting parts of the subsequent commits don't get
obscured.
"
"9777ddbe05dd6aa4c0f6d117671568a697334d26","2012-12-18 19:40:24-05:00","front: New asset extractor implementation.

This copies files from the assets folder onto the SD card.  This is not
a standard file copy; it actually involves decompressing files straight
from the APK using the AssetManager class from the Android SDK.

The advantage of this approach vs. the existing DataDownloader class is
that asset files can be stored in the git repo uncompressed, permitting
tracking and reducing the size of the local git database. Previously,
even the smallest change to the asset files required committing a
completely new (large) binary zipfile to the repository.
"
"5cacd261f28a63fc482ec45816ea01e013c6c454","2012-12-18 20:20:21-05:00","front: Re-implemented MainActivity to use new asset extraction scheme.

An asset version number is used to determine whether the app should re-
extract the assets.  Whenever the assets are modified, please increment
the constant in MainActivity.java, to ensure the updated versions are
used.
"
"23af5119c264acbefb209f807ba06145e98e9873","2012-12-18 20:21:45-05:00","front: Added menu item to manually refresh asset files.

Located in the Advanced menu for now.
"
"215ef0a72b52f3e72f9d6d843680ad48760b9192","2012-12-18 20:23:21-05:00","front: Deleted obsolete files related to asset decompression.

Not sure why the GPL license was there; it's already in the docs
subdirectory.
"
"f173197e0b066397cff9bee8ab57d0933899b429","2012-12-18 21:02:18-06:00","Removed illegal characters (unable to build)
Apparently my build environment doesn't like foreign characters.  Had to remove them for ant to work.
"
"352a0560eb551f285850b564fb8f65089e05f85f","2012-12-18 22:14:18-05:00","Fixed some localizable strings using formatting args.
"
"53451ef9a2a836ab32dac41a791402c53cca9169","2012-12-18 23:02:58-05:00","Fix countAssets recursion.

Also more compact.
"
"1e34f7a0de28daf858e499fa1149823ed7307937","2012-12-19 01:13:13-05:00","Update Japanese translation. Also revert countAssets.
"
"6bc6b0888f4c0fa4e1da41dd54d7e2b87d36de17","2012-12-19 09:35:35-05:00","front: Reorganized input menu (don't bother translating)

I will be cleaning up the menu resources soon (re-ordering strings in
strings.xml, re-ordering preferences in preferences.xml, and formatting
key names for consistency).  So please don't waste any time translating
or polishing anything right now.
"
"d48405927958b657691bc968570ed235be6970c6","2012-12-19 11:56:51-05:00","front: Created preferences/menus for special function mapping.

TODO:
- Wire to core:
- On game launch, write these to Player 1 InputMap
- On input, call JNI to invoke function from PeripheralController
"
"ee9a9f768118cb9432032d23d5cc7c3acdfa08a9","2012-12-19 21:04:13+01:00","Allow to crosscompile and compile extra modules with m64p_helper_scripts

The install targets of the Makefiles are now used to generate the test
directory. This allows the build script to use the correct file extension and
similar differences between the platforms.

A user with the correct mercurial clones in sources/ can also use the
environment variable M64P_COMPONENTS to specify which component should be
compiled. This is interesting when also wanting to compile/update wahrhafts
plugins in one run.
"
"8c0d4d518dcd9726bff121b77e56e380c845803c","2012-12-19 21:08:48+01:00","Use already by ./m64p_build.sh generated doc files in build_bundle_bin
"
"29ee1064e9493b66976da48266a595e37a5dde74","2012-12-19 21:20:36+01:00","Use already by ./m64p_build.sh generated manpage in install_binary_bundle.sh
"
"ce42cfb753aeb1e7062378aad7d0a019bf99ed67","2012-12-19 21:57:39+01:00","Don't try to find OpenGL libraries on MacOSX and MinGW using pkg-config

MacOSX and MinGW don't provide gl.pc or glu.pc to find the cflags or libs using
pkg-config. Removing this search and replacing it with an hardcoded value is
easier on these platforms.
"
"1f66504005bf845324c50e4b7bcfa8bf8d50ab46","2012-12-19 21:57:46+01:00","Don't try to find OpenGL libraries on MacOSX and MinGW using pkg-config

MacOSX and MinGW don't provide gl.pc or glu.pc to find the cflags or libs using
pkg-config. Removing this search and replacing it with an hardcoded value is
easier on these platforms.
"
"40223026618ba2641732ccafc06a0c36dc816f7f","2012-12-19 18:50:48-06:00","The invisible illegal character returns!
Dun, dun, dunnn..
"
"9d1ff6325352811f49db94a0a4c8ee47fd3c7510","2012-12-19 21:14:52-05:00","Bugfix: AbstractProvider.getHardwareId() safe for all APIs.

InputEvent and InputDevice require API 9, and they were parameters of
the function, so they couldn't be avoided the usual way with if/else.
"
"59be25c026df8bbff137057c6dd1508a6f3257a1","2012-12-19 21:33:31-05:00","front: Wired special function input handling (many just stubs for now).

See the TODOs in PeripheralController for the functions that need to be
implemented.  There's probably more than one good way to implement them
so I'll leave that to you guys since you're more acquainted with the
core implementation.

One remaining problem with the special function mapping is that it's
possible to map the same key to multiple special functions, or a
special function and an N64 command. In either case, the special func
takes precedence over the N64 command and the special funcs at the
bottom take precedence over the funcs at the top of the menu.

Consider this a temporary solution, enough to get a Beta out the door.
I think the better solution ultimately would be to extend the layout of
the button mapping screen for Player 1. I'll probably tackle that once
I take care of the other more pressing tasks like multiplayer.
"
"aaf154f7f9dc3acdccc9756e46aaef9a04302b0c","2012-12-19 23:30:47-06:00","Improved cheats menu behavior
Getting better, but still more work to do.
"
"8fb1dd225ddcf19bb6226f0617aad98224d9bd04","2012-12-19 23:31:20-06:00","Added new files
"
"b7be124bf55d5e618a7a46695b18276ba536498f","2012-12-20 06:46:53-05:00","Replace list iterator with foreach loop.
"
"6ad367fb1f2cd832703dc4ad7cfef282555b2ea5","2012-12-20 07:00:12-05:00","Suppressions added, and unused imports removed.
"
"2a1c3c1221d1ee3609cff5412fb588ca1ee1b6a6","2012-12-20 14:37:48+01:00","Added an option to configure emulation speed

This can be done in the ingame menu under 'Game speed', for know this is
an input text widget, but we definetly need to replace this with a
slider widget (this will need a custom layout but I'm not very
confortable with these xml)

Also I added the setCancelable(false) flag to ingame dialogs to fix a
bug where games stay paused after hitting back key, another solution
would be to add a key listener and resume game when back key is pressed.
"
"522e27f10c4a1ba7e346233fa6a61df193daa5e9","2012-12-20 16:10:32+01:00","Disabled Audio Mixing with SDL >= 1.3 to avoid distorted audio

Signed-off-by: Sven Eckelmann <sven@narfation.org>
---
src/main.c |    5 +++++
1 file changed, 5 insertions(+)
"
"07faf22731f32329e0cbff0ea392642ce21d786d","2012-12-20 11:01:48-05:00","Made some strings localization-friendly.

See here for more info:
http://developer.android.com/guide/topics/resources/string-resource.html
"
"3bf82b2ee6e6b0191a6f88d1c345f9a1cfb7509d","2012-12-20 17:03:45+01:00","Fix autoconfiguration with SDL 2.0
The name of the Joystick device is automatically set back to '' when
SDL_JoystickClose(...) is called. The compability wrapper has to store the name
inside a private buffer to provide a similar functionality like pre-SDL2.0
versions of SDL_JoystickName.
"
"982077aadcbdc5855e50d229caba8705e1469332","2012-12-20 17:16:53+01:00","Allow to compile against SDL2
The video/window API was modified in such a way that it is not trivial to
convert the vidext API to SDL 2.0 without breaking SDL 1.2. A compat layer was
added to avoid a full conversation until SDL 2.0 proved itself to be helpful
and SDL 1.2 is not enough anymore.

Also minor differences between the API were also fixed. There are still open
questions about how to support SDL_EnableKeyRepeat and SDL_JoystickOpened in
the eventloop. These are not important to get an SDL 2.0 prototype of the core,
but will generate a warning until these are fixed.
"
"95a48fa6ed37a59731a05d96a0f7ca796d84c848","2012-12-20 11:33:03-05:00","Organized and formatted GameMenuHandler.java.

Changelog:
- Created some constants for the new speed settings.
- Substituted some utility functions (Utility.clamp(...) and
SafeMethods.toInt(...))
- Personal preference but it seemed kind of confusing to change the
custom speed but not go immediately to the custom speed.
- Illegal speed inputs get clamped rather than reverting to the last.
- Either way mLastSpeedFactor is unneeded (just test before setting
mSpeedFactor)
- Moved all handling logic out of the main switch statement in
onOptionsItemSelected.  Otherwise that function gets long and hard
to read.
"
"32b63d40852e8c2dfb3a3dc8f459de28758776c3","2012-12-20 11:46:56-05:00","Touched up javadoc
"
"6447daeab4045eb17019ba708c5fc21bc1618b75","2012-12-20 12:05:18-05:00","Added clock icons for in-game speed menu.
"
"f819ee4d3e24ee244bf32406f63532a4c1f01e3b","2012-12-20 12:59:52-05:00","- Remove an unnecessary qualified name from AbstractController.java (the first set of params (<>) don't have this.

- Space out FileUtil.java. Looks consistent across all methods now.
"
"4fa83d116f842e2f07935c604ba4f4c89096c896","2012-12-20 19:04:21-05:00","Bugfix: GLES2N64 'hack z' option needed to be negated.
"
"fd9a215b6bd78d619afd850700f2cd89c185f810","2012-12-21 01:06:55+01:00","SDL: Remove non-functional changes between hg:5557:c1ed57cbfd66
"
"884b15976ffa4f913e3a755b928ff89408084a68","2012-12-20 23:21:51-05:00","Updated Eclipse java formatter preferences.

Ternary operator ?: no longer forces to separate lines.
"
"e6031c7631f9c914daab80869828591f9b4cf6b6","2012-12-20 23:41:22-05:00","front: True multiplayer support added.

Inputs are now filtered by hardware ID to ensure that commands are
associated with the correct player.  This should work even with
identical controllers, though we'll have to test to be sure.

Peripheral->Player mapping is done from an in-game menu rather than the
main menu.  This menu is only visible when more than one player is
enabled in the main menu.  The in-game menu will only list the players
that are enabled.  This keeps the menu clean for single-player games.

At the moment, the app does not remember the hardware mappings between
sessions, so the user will have to reassign players to controllers
every time they restart the app.  I'll probably make this persistent
at some point to minimize the annoyance.  Regardless, if a controller
is re-plugged it will need to be re-mapped to the player, so there
will always be some annoyance factor.  This is just a limitation of
Android as far as I can tell.  JellyBean provides persistent hardware
identifiers, but they are not necessarily unique if the controllers are
the same make and model...
"
"c2e4d29700958782cda6bebc1c4a9c66e7ff4ce0","2012-12-21 02:56:26-06:00","Workaround for lost cheat options after game
Leaving the game after launch from cheats menu would bring user back to the cheats menu missing all the cheat options.  The simplest workaround is to just reload the entire menu system on game lauch from cheats.  This brings the user back to the front page after leaving the game  Another solution would be to persist the chosen cheat options and require the user to always launch from the front page (less convenient).  Best solution would be to detect when the menu is re-presented after the game activity is popped, and re-populate the missig options.
"
"6a1f41a1f8ad2617d5c2faee284c000e89732d2e","2012-12-21 09:58:50-05:00","front: New controller icons, reordered some menus.
"
"467d747516e4a64a38bce1c1dc627568797d9b2b","2012-12-21 11:00:12-05:00","front: More tweaks to main menu.
"
"d1e20c9b88115adb9550add1da7d4e99ec2460fc","2012-12-21 11:40:28-05:00","front: Added icons for debug and plugin menus.

Feel free to replace with something else.
"
"892903c2cf56cc36d29deea1cb0318057baff5eb","2012-12-21 14:09:34-05:00","Just some general cleanup.

- Added some spacing between where variables are declared, and where the actual code body occurs.
- Removed a try-catch statement in Utility.java as an exception wouldn't be thrown in that case (not even IOException).
- Added some basic javadoc to some methods in Utility.java.
- Added final to some global fields/runnables.
- General spacing of some things.
"
"25dd83928ac3b6cf4dc40fdfc883bbeff4624886","2012-12-21 14:07:23-06:00","Implemented texture-pack importing
Importing zipped texture packs seems to be working fine.  Feel free to
move some of this out of MenuActivity into a handler if it seems too
cluttered.
"
"3260b41b6a48f44554720bd6fe43b07bd3f929d6","2012-12-21 15:04:16-06:00","Texturepack processing moved to shared pref change
Cleans up a little clutter
"
"4c867bdf23ace87f2fe0b6b7559ba06fbca8732b","2012-12-21 15:21:27-06:00","Save English strings to error log
(also cleaned up some of the formatting mess)
"
"3887273cf7f24636101b781a3306bb291cb58c19","2012-12-21 16:40:53-05:00","front: Localized crash menu, set dependencies, removed unneeded file.
"
"7cb1c86327a564ba2002e65ba9a0e8922dd687a2","2012-12-22 00:14:28-05:00","Bugfix: Controller on/off toggles now 'stick'.

Problem was that I was handling View.onClick(..) rather than
CompoundButton.onCheckedChanged(..).  ICS+ devices were using a switch,
which can be toggled either by clicking or by sliding.  People who were
sliding the switch were not getting the state change to stick.
"
"ad23fbcca9fac459da3ba6e01113ac5bc9044fba","2012-12-22 00:26:27-05:00","front: Tiny simplification.
"
"ae32127a5f56197651d0cab7d1411ca459dee70c","2012-12-22 21:41:45+01:00","Added a fix for zelda OOT subscreen delay

This is just a hack to force using the subscreen delay cheat code for
the corresponding version of zelda OOT, this will not affect manual
cheat code.
"
"c17d2bae696a19dfe3a8b08d643f7e6aa8468c4b","2012-12-24 02:43:03-07:00","Decompress the manual page.
"
"ed4f8d906b1cf03e84f5ff8a0b2a89a07769450b","2012-12-24 02:47:35-07:00","New sentence, new line. Troff relies on this to detect sentences properly.
"
"45346e9ccb8cf6b9cf299d39f8a62c335f91046e","2012-12-24 02:51:36-07:00","Minor formatting improvements.
"
"2225820fd23ac6d21fb7d915b3cb8db0a57928fa","2012-12-28 14:27:40-05:00","Updated targetSdkVersion to 17.
"
"8be0c1dd72f98564362d0097c724c29d66502e25","2012-12-29 21:11:42+01:00","Add new controller name  'Logitech Cordless RumblePad 2'
"
"28e5565b951462cec7a283a7f3a0220ac7f80dce","2012-12-30 11:23:56-05:00","front: Modularized some layout resources for upcoming changes.
"
"223270a065c9582651382a2802f2e0787a8def85","2012-12-30 14:34:04-05:00","front: Consolidated xplay-specific layout resources

Differences consolidated to a_pad.xml and c_pad.xml.
Also cleaned up a few other layout resources.
"
"0dd913fc301d54b45136c2dc5a70eb78681739dd","2012-12-30 18:08:19-05:00","front: Streamline some code for readability.
"
"49fb9398ceb66728605f985600308cad01715d4b","2012-12-30 18:09:15-05:00","front: Cleanup the input map layout for large devices.
"
"af1ddc60f3fe71f7e279b36a265715a80f36c4ca","2012-12-30 15:22:04-08:00","merge heads with no other changes
"
"b7ce0a97a43d2a08cee677e65bb3637b8920c8ba","2012-12-30 15:48:49-08:00","merged heads
"
"2ba5766d6304c98b934d79a59c1c8d60e235d28c","2012-12-30 15:50:50-08:00","fix install/uninstall scripts to work with uncompressed man page in ui-console module
"
"325c92a72723bcb259f85686d17f452fc390a184","2012-12-30 16:15:10-08:00","merge heads
"
"ac0b4efef98a4855aed256651f3c223e75655ebc","2012-12-30 16:15:58-08:00","merge heads
"
"ca95fe81feb3fc96fdb93ee8b8957f1262048fd7","2012-12-30 16:55:11-08:00","merged heads
"
"4db837ed229b91d4c495d5ac15767a3960da5060","2012-12-30 17:07:40-08:00","merge heads
"
"5796a6ca6543906411848ac2c36491854773b030","2012-12-30 18:47:06-08:00","merge heads
"
"6776fa22e9eb73562019320d7d36b60528a16768","2012-12-31 00:20:15-05:00","front: Removed calibrate button from mapping screen.

The complexity may not be worth the benefit.  It solves an issue with
Xbox controllers and perhaps some others, but adds a lot of confusing
logic to the implementation and is usually a red herring to users. The
same functionality can be achieved by restarting the app.  Plus this is
all a band-aid for the root problem, which at this point is simpler.
"
"413810deb26ff8a15d08a896da405bd0a43f77dc","2012-12-31 01:13:56-05:00","front: Better solution to the analog trigger bias problem when mapping.

If the 'Calibrate' button on the input mapping screen was a band-aid,
this is hopefully the cure.

See previous commit log.
"
"df8d48a7a47b4bf7c8f41ff94261a3754e2e3b10","2012-12-31 11:46:15+01:00","audio-sdl: Merge 'upstream/audio-sdl' hg:95:eb37c03da967
"
"5aa5680e093b18079972bc07a08d35fa95b7e1f5","2012-12-31 11:51:12+01:00","core: Merge 'upstream/core' hg:516:4a08f8dd5534
"
"11b45dfc4cb9e934319cefbee2b58e6b8f8517b0","2012-12-31 11:55:32+01:00","front-end:  Merge 'upstream/ui-console' hg:135:f50de2459c49
"
"5ac585a425888a0351371231e95254f9765cfa59","2012-12-31 11:56:40+01:00","gles2rice: Merge 'upstream/video-rice' hg:170:195de61a68ee
"
"0afac792bf193af01facf3bf57d40b8ea14b41a8","2012-12-31 12:01:47+01:00","input-sdl: Merge 'upstream/input-sdl' hg:167:2e45dfe2ecea
"
"511a5f46b8a46a1c76f657c2b7a87ec851e53a64","2012-12-31 12:03:16+01:00","rsp-hle: Merge 'upstream/rsp-hle' hg:95:c502f26276b0
"
"f7fd50d27049a8e3ff1ba85a4ce7b0a556b51041","2012-12-31 12:08:26+01:00","core: Remove double includes not present in upstream/core
"
"1b2f350829e57fe6604e24bbc7675eab59983b94","2012-12-31 13:15:05-06:00","Front: Play as a preference screen-- Resume, Restart, Cheat Options
I do not like the modal dialog that comes up while reading the header (slow for .zip files).  This should be redone so the work happens in the background, and the cheat options silently appear in the menu after loading is complete.  I also do not like the unpredictable behavior of 'Resume' if cheats were applied for the auto-savestate.  Some cheats (such as 'Mario's hat in hand') are reloaded while others (such as 'Press L to levitate) are not.  Need to check API to see how cheats are turned off, and this should be done before the auto-savestate, then re-applied after Resume does the load-state.  More complicated, but will behavior will be more predictable and consistent with what users are likely to expect.
"
"587a1e2a7158223157adda2f66e75d787db2d53e","2012-12-31 13:23:14-06:00","Accidentally committed with optim release setting
"
"f756078917a24b4971885c7f839566c7922c90f2","2012-12-31 15:31:11-06:00","front: Added missing sanity-check
Make sure that the game save subdirectories exist so that we can write to them
"
"ba5755945b81cfb7e776377cca9ef8134a9cb3ab","2012-12-31 17:39:45-05:00","Fix a typo, also minor things.

Happy new years to all of you, by the way.
"
"a3d0c044659734dcdeaeb8f86e0c980b5abaf196","2012-12-31 19:05:13-05:00","Fix an issue where isEmpty() doesnt work on some devices (lol)
"
"ac21234450bbc68209987a3768eb87d1990aed34","2012-12-31 19:59:58-06:00","front: Removed dialog when reading CRC header
This is still not any faster, because the menu activity won't finish until the thread adding the cheats options has died.  The bulk of this delay is caused by Utility.getHeaderCRC.  We need to implement a method to read the header directly through a zip stream, rather than decompressing the whole file first.  (A similar method could be used when launching zipped ROMs to speed up the sluggishness there as well)
"
"b1a166e6f2ceb3d020383b4d7f3fcd34c6dd0fea","2013-01-01 17:59:50-05:00","Remove isNullOrEmpty

Considering the isEmpty() method in TextUtils exists, there's no need
for it anymore.
"
"26d30f1c6cf1a6b407bebaaa11dde1b9088d1245","2013-01-01 17:36:03-05:00","front: Simplified a bunch of layout resources using styles.
"
"bfa1f9ab69ea6a1a7fa22c9338199f6557f41f11","2013-01-02 00:57:46-05:00","front: Moved special function mapping into regular mapping screen.

Eliminates a lot of hackish java code, simplifies the mapping logic.
Also makes it clear to the user whenever a button is re-mapped from an
N64 command to a Mupen special function, and vice versa.
"
"63914a0ed6d28b44520214559c7cf65a35666029","2013-01-02 10:34:02-05:00","bugfix: Input mapping works with IMEs (e.g. USB/BT Joystick Center).
"
"10d122b9bf201a0297b8805df0f12229981648d7","2013-01-02 12:01:42-05:00","A little code cleanup and remove some logcat spam.
"
"edb9c3cc4c82f8032150b4c51b46f7800e43903c","2013-01-02 12:29:50-05:00","front: More layout resource consolidation and tweaking.

Only two layouts now for the mapping screen: normal and narrow.
Narrow is for small devices in portrait.  Added subtle background to
analog and c-pad messages for Xperia PLAY, so that the empty space
doesn't look weird.
"
"f9438a6906434c50babd66a17ffa748f438d428f","2013-01-02 13:20:42-05:00","front: Localized and provided missing text for all mapping buttons.

For some buttons (d-pad, c-pad, analog) the text is hidden, but still
used in the title of the listener popup. This text can also be used for
the OUYA version of the mapping screen.

Adjusted arrow images in the analog pad to be more clear.

Simplified portrait version of the mapping screen to reuse resources.

Removed some orphaned strings in the Japanese translation.
"
"bcc987172f76359e65e71ba174121254a79cc372","2013-01-02 13:30:57-05:00","bugfix: Removed some nuisance logcat chatter.
"
"b7d08c5e12a8e7efb3ac209b5d668465cf0913c1","2013-01-02 14:52:58-05:00","front: Added button coloration on focus for mapping screen.
"
"cfa884f3b40ed387a1fa4bdba5d77460d9b9d77a","2013-01-02 15:28:08-05:00","bugfix: Touch controls behave correctly when finger slides off button.
"
"535d2722a3fa498f33573ae2ba50d7f9abac828b","2013-01-02 16:31:11-05:00","front: Redundant button mapping feature implemented.

Users can now map multiple buttons/sticks to a given N64 command or
Mupen64Plus function.
"
"0efc3a40fcf1a902bdf074cfe7b08739522f6eb9","2013-01-02 17:50:59-05:00","bugfix: Safely handle null device when using USB/BT Joystick Center.
"
"9609de418ff11b45a7c1a0797f2d45e72870e37e","2013-01-02 22:15:01-05:00","front: Updated default button mappings.

With redundant mapping now possible, the default map can apply to xbox
and ps3 controllers at the same time, for the most part.  The C-pad and
Z button are unmapped by default, because the axis definitions conflict
between the two controller types.  Positive AXIS_Z represents the left
analog trigger for Xbox and right stick horizontal for PS3.
"
"318ac7ba51cf45ca33eac0e564c3c08ff20d1183","2013-01-02 22:16:06-05:00","front: Made analog bias test more conservative, better implementation.
"
"4e556084fe723c9f78d5fde7e812d3cef6b3fef5","2013-01-02 23:05:27-05:00","front: Input map popup listener now lists the current mappings.

Especially important now with multi-key mapping.
"
"961173ad1c229ac04efc78366a857c26ae09e4f3","2013-01-03 14:17:58-05:00","front: Enhanced the multi-player mapping UI.

Player mappings persist. UI is in the main menu under Play since it
will need to be accessed often, right before launching the emulator.
"
"3d2865d2c99fdec597e2de3ace42064e042991fb","2013-01-03 14:58:21-05:00","front: Code cleanup, variable renaming.
"
"e725f4f58482dfceda53f25721f8e0c0083f1c6a","2013-01-03 15:53:12-05:00","front: More informative player mapping screen.
"
"529be69066533ba4bc2e4bb7a8ee9dd441df0cee","2013-01-03 16:44:08-05:00","bugfix: Multi-player works even if Player 1's controller disabled.

Bug first reported at
http://www.paulscode.com/forum/index.php?topic=723.msg7581#msg7581
"
"a0d6443e220028c998414e7892f9d963faa96b13","2013-01-03 18:08:59-05:00","front: Tweak some strings in player mapping.
"
"253119455a68cbd1ab205643fec43b26edd50821","2013-01-03 19:51:50-05:00","front: Added confirmation dialog before resetting from main menu.
"
"d2678313c737653c2518dca806407d46f10155b2","2013-01-03 21:45:22-05:00","front: Added in-game menu item for changing IME.

This is critical for people using an IME like USB/BT Joystick Center.
These users need to be able to revert to the standard soft keyboard
when they want to save state to file, since that task requires them to
enter a filename.
"
"b80da26d9bb5e44e9706be970a89f5349e8bd5e4","2013-01-03 22:24:28-05:00","front: Added setting for hiding touchscreen overlay buttons.

Useful for touch-mapped controllers.
"
"17b3df8e3073c5750b805d37447bd0735a85236a","2013-01-03 23:26:23-05:00","front: Added menu item to migrate savefiles from old to new version.

Located in the Advanced menu. Makes a backup of any file that would
otherwise be overwritten.
"
"9408ce355eedd8da2cde9a294ff21d3434ed69d9","2013-01-04 10:47:12-05:00","cleanup: Removed unused bitmap resources.
"
"9c4e24f11d74490427b7c4c367bfaa6babd44488","2013-01-04 10:59:22-05:00","cleanup: Reorganize strings.xml, remove unused resources.

NOTE: Japanese translation is temporarily removed to simplify the
reorganization process.  Don't worry, it will be back very soon.
"
"5aee9e312839efc270a393762f16a53ada773f1e","2013-01-04 11:38:01-05:00","cleanup: More organization, add some developer instructions.
"
"b13c3b002995ab945360ca3e8d2ce1eeebe054cc","2013-01-04 16:19:59-05:00","cleanup: Major renaming of xml keys: All users should reset preferences

No functional changes made to the code, just renaming of lots of stuff.
"
"07b994a213eafebc75079e0d2de44a243131d8bc","2013-01-04 17:08:52-05:00","cleanup: Restored Japanese translation.

Feel free to finish the translation, strings.xml is stable now.
"
"bd29a5a24dded5aeb51c73654b6f286e048a7cfc","2013-01-04 17:43:38-05:00","bugfix: Fixed broken preference keys.
"
"725d8960ac479ab9c6f54dbe43271cf210d39deb","2013-01-05 01:48:52-05:00","Integrated BugSense and ACRA crash reporting system.
"
"19b95416388281df0111a26a7cb56a541b36c6e0","2013-01-05 06:20:26-08:00","Fix force-close introduced in commit b13c3b0029
"
"caf78db7d761d6874a30b24b1f71244c7586b269","2013-01-05 10:41:58-05:00","front: Moved crash tester into a separate class.

BugSense classifies errors by their stack trace. If so much as a line
number changes in the stack trace, the error will be categorized as a
new error. That's undesirable for benign crash tests - we don't want a
new error report every time the lines get shuffled. So we move the
crash test machinery into a separate class that will remain line-stable
for a long time.
"
"fcb4bf4a5f12a122dde3d72fae55c1b6eef74f25","2013-01-05 14:20:00-05:00","front: Added documentation to CrashTester.java

Hopefully no more line changes from here on.
"
"54f2d6a81aabaa1bcca4ac6b21b901a8c9d64bd5","2013-01-05 15:58:06-05:00","front: Added utility activity for controller diagnostics.

In the Advanced menu. I had built this as a separate app earlier, then
it occurred to me that I could just put it directly in the app. It
shows the raw outputs from MotionEvents and KeyEvents.
"
"774c6351f60246753d321b862027683506528ab9","2013-01-05 15:15:10-08:00","Merge pull request #22 from MP2E/fcfix1

Fix force-close introduced in commit b13c3b0029
"
"d337e669a20ca5a0b26bb3dc32e4fca462dc2ef1","2013-01-05 21:20:54-05:00","front: Added more info to the controller diagnostics activity.
"
"ddffd2776bc3f5f91f66bb1e48b6037be11a2850","2013-01-05 22:02:06-05:00","front: Added 'About' dialog, moved URIs to strings.xml.

Right now the URIs are non-translatable, but we can easily change that
later if people provide alternative websites in other languages. Now
that's dreaming...
"
"c19e640bced4b06986b6074c34fba6fa4290a337","2013-01-05 22:40:04-05:00","front: Tweaked summary in crash report contact info.

Shows instructions when the preference is empty, shows the given value
otherwise. Easier to see at a glance.
"
"c12f3c22397d559137c7ef65a5715f6e0d6042bc","2013-01-06 09:43:23-05:00","front: Added 'Help' dialog, with FAQ and bug report buttons.
"
"682cad5eef807038e28e41da46f836d4345ba5d2","2013-01-06 11:09:16-05:00","cleanup: Added missing string to Japanese translation.
"
"d9c1f23d7ebb0c3d81fbadd7515e5341a285e6d1","2013-01-06 14:07:40-05:00","cleanup: Tweaked a few strings

Until we get a workflow with transifex, I'll still copy the english
strings into the japanese file to facilitate manual translation.
"
"4c92dd8c7584cafa613eba585b7db4c4583e0a9b","2013-01-06 14:21:42-05:00","front: Changed default save dir to mupen64plus and moved into Advanced
"
"765519a32c5c9a85f91a82cb13cbead4e49d100c","2013-01-07 07:22:54-05:00","front: Removed in-game reset menu (redundant)
"
"35c325b5d84b601c39fafad86af8b2e05d3d3f43","2013-01-07 09:29:30-05:00","front: Moved listener interfaces inside the classes that call them.

Reduces file clutter and follows the pattern used throughout Android.
e.g. View.OnClickListener, Preference.OnPreferenceClickListener

Renamed setter method to follow Android naming convention.

Added @Override annotations.

Auto-formatted LongClickCheckBoxPreference.java.
"
"f1a557c06e6ffdbaa03967455adae8864822ccc5","2013-01-07 09:33:08-05:00","front: CheatsMenuHandler: changed field scope, simplified some logic
"
"8c37368ef70a7b2c9f99527da07e5b43097b17c9","2013-01-07 09:34:51-05:00","Update the Japanese translation.
"
"5dadc654be84860268b40f21fc68a7eaeb22c53f","2013-01-07 21:26:51-06:00","Hook up core functions (incomplete)
Hooked up most of the core functions.  Haven't tested extensively yet, and there are still two remaining.  Frame advance and the gameshark button are hard-coded into the core and do not have equivalent functions in the API to use in the front-end.  For frame advance, the M64CMD_SET_FRAME_CALLBACK could be utilized to listen for when one frame has been completed, along with the pause function.  There doesn't appear to be an easy way to access the gameshark without modifying the core.  A hackish solution would be to assign it to a rarely-used SDL scancode, and then inject calls to M64CMD_SEND_SDL_KEYUP and M64CMD_SEND_SDL_KEYDOWN (this could also be used as an easier-to-code implementation for frame advance).  Additionally, I'd like to see a less hackish way to synchronize slot and speed functions between PeripheralController and GameMenuHandler.
"
"bd0d5c566461b91683dabdecea959a09998e7989","2013-01-07 21:33:03-06:00","Accidental delete
Not sure why this line got deleted..
"
"4b3a25b43eca22f0b1f0c6eac9e5b486bf983b9e","2013-01-07 22:35:22-06:00","font: Minor tweaks
Unused varriable, and forgot to update the version in the manifest
"
